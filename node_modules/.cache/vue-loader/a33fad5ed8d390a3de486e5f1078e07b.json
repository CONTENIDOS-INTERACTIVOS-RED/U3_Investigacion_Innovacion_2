{"remainingRequest":"/home/runner/work/U3_Investigacion_Innovacion_2/U3_Investigacion_Innovacion_2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Investigacion_Innovacion_2/U3_Investigacion_Innovacion_2/src/views/curso/Tema3.vue?vue&type=template&id=5f561b26&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Investigacion_Innovacion_2/U3_Investigacion_Innovacion_2/src/views/curso/Tema3.vue","mtime":1757267972690},{"path":"/home/runner/work/U3_Investigacion_Innovacion_2/U3_Investigacion_Innovacion_2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Investigacion_Innovacion_2/U3_Investigacion_Innovacion_2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Investigacion_Innovacion_2/U3_Investigacion_Innovacion_2/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Investigacion_Innovacion_2/U3_Investigacion_Innovacion_2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Investigacion_Innovacion_2/U3_Investigacion_Innovacion_2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMy4gSW1wbGVtZW50YWNpw7NuIGRlIGZlZWRiYWNrIGNvbnRpbnVvJyIpCiAgLmNvbnRhaW5lci50YXJqZXRhLnRhcmpldGEtLWJsYW5jYS5wLTQucC1tZC01Lm92ZXJmbG93LWhpZGRlbgoKICAgIC8vIEJsb3F1ZTogdGV4dG8taWNvbm9ibG9xdWUtaW1hZ2VuCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy04CiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNSBFbiBlbCBjb250ZXh0byBkZSBsYXMgbWV0b2RvbG9nw61hcyDDoWdpbGVzLCBlbCBmZWVkYmFjayBjb250aW51byBzZSBwb3NpY2lvbmEgY29tbyB1biBwaWxhciBmdW5kYW1lbnRhbCBwYXJhIGdhcmFudGl6YXIgbGEgbWVqb3JhIGNvbnN0YW50ZSB0YW50byBkZWwgcHJvZHVjdG8gY29tbyBkZWwgZXF1aXBvIGRlIGRlc2Fycm9sbG8uIEEgZGlmZXJlbmNpYSBkZSBsb3MgbW9kZWxvcyB0cmFkaWNpb25hbGVzIGRvbmRlIGxhIHJldHJvYWxpbWVudGFjacOzbiBzZSByZWNpYmUgYWwgZmluYWwgZGUgdW4gY2ljbG8gbGFyZ28gZGUgZGVzYXJyb2xsbywgZW4gU2NydW0geSBvdHJhcyBtZXRvZG9sb2fDrWFzIMOhZ2lsZXMsIGVzdGEgcHLDoWN0aWNhIHNlIGRpc3RyaWJ1eWUgZGUgZm9ybWEgY29uc3RhbnRlIHkgc2lzdGVtw6F0aWNhIGR1cmFudGUgdG9kbyBlbCBwcm95ZWN0by4gRXN0YSBkaW7DoW1pY2EgcGVybWl0ZSBhanVzdGFyIGNvbXBvcnRhbWllbnRvcywgaWRlbnRpZmljYXIgb3BvcnR1bmlkYWRlcyBkZSBtZWpvcmEgeSByZWZvcnphciBhY2llcnRvcyBjb24gcmFwaWRleiwgbG8gcXVlIHNlIHRyYWR1Y2UgZW4gcHJvZHVjdG9zIGRlIG1heW9yIGNhbGlkYWQgeSBlcXVpcG9zIG3DoXMgY29oZXNpb25hZG9zIHkgcmVzaWxpZW50ZXMuCgogICAgICAgIC5iZy1jb2xvci0yLnAtNChkYXRhLWFvcz0iZmFkZS1sZWZ0IikKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtc3RhcnQKICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvMS5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgICAgcC5tYi0wIEVsIHZhbG9yIGRlbCBmZWVkYmFjayBubyByYWRpY2Egw7puaWNhbWVudGUgZW4gc2XDsWFsYXIgZXJyb3JlcyBvIGFjaWVydG9zLCBzaW5vIGVuIGPDs21vIHNlIGNvbnZpZXJ0ZSBlbiB1bmEgaGVycmFtaWVudGEgZXN0cmF0w6lnaWNhIHBhcmEgZ2VuZXJhciBhcHJlbmRpemFqZSBjb2xlY3Rpdm8geSB0cmFuc2Zvcm1hciBsYSBjdWx0dXJhIG9yZ2FuaXphY2lvbmFsLiBBbCBpbXBsZW1lbnRhcnNlIGRlIG1hbmVyYSBlZmVjdGl2YSwgZWwgZmVlZGJhY2sgZm9tZW50YSBsYSB0cmFuc3BhcmVuY2lhLCBsYSBjb25maWFuemEgbXV0dWEgeSBlbCBjb21wcm9taXNvIGNvbXBhcnRpZG8gY29uIGxvcyBvYmpldGl2b3MgZGVsIGVxdWlwbyB5IGRlbCBwcm9kdWN0by4KICAgICAgLmNvbC1sZy00CiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy8yLnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKCiAgICAvLyBCbG9xdWU6IHRpdHVsby1zZWd1bmRvCiAgICAjdF8zXzEudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMy4xXSBDdWx0dXJhIGRlIHJldHJvYWxpbWVudGFjacOzbiBlbiBlcXVpcG9zIMOhZ2lsZXMKCiAgICAvLyBCbG9xdWU6IGltYWdlbi1jb2xvci10ZXh0byA0OjgKICAgIC5yb3cubWItNQogICAgICAuY29sLWxnLTQKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzMucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAuY29sLWxnLTgKICAgICAgICAuYmctY29sb3ItMS5wLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTUKICAgICAgICAgIHAubWItNCBFbiBlbCBjb3JhesOzbiBkZSBsb3MgZXF1aXBvcyDDoWdpbGVzLCBsYSByZXRyb2FsaW1lbnRhY2nDs24gY29uc3RhbnRlIHkgY29uc3RydWN0aXZhIG5vIGVzIHVuYSBhY2Npw7NuIHB1bnR1YWwsIHNpbm8gdW5hIHByw6FjdGljYSBjdWx0dXJhbC4KICAgICAgICAgIHAubWItNCBFc3RhIGN1bHR1cmEgaW1wbGljYSBjcmVhciB1biBhbWJpZW50ZSBkb25kZSBjYWRhIG1pZW1icm8gc2Ugc2llbnRhIGNvbiBsYSBsaWJlcnRhZCB5IGxhIHJlc3BvbnNhYmlsaWRhZCBkZSBjb21wYXJ0aXIgb2JzZXJ2YWNpb25lcywgZXhwcmVzYXIgaW5xdWlldHVkZXMgeSBwcm9wb25lciBtZWpvcmFzLgogICAgICAgICAgcC5tYi0wIExhIHJldHJvYWxpbWVudGFjacOzbiBlbiBsb3MgZXF1aXBvcyDDoWdpbGVzIG5vIHNvbG8gYnVzY2EgbWVqb3JhciBsb3MgZW50cmVnYWJsZXMsIHNpbm8gdGFtYmnDqW4gZm9ydGFsZWNlciBsYXMgcmVsYWNpb25lcyBpbnRlcnBlcnNvbmFsZXMsIGxhIGNvbmZpYW56YSB5IGxhIGF1dG9nZXN0acOzbi4KICAgICAgICAKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBBIGRpZmVyZW5jaWEgZGUgbG9zIGVuZm9xdWVzIHRyYWRpY2lvbmFsZXMsIGRvbmRlIGxhIHJldHJvYWxpbWVudGFjacOzbiBzdWVsZSBlc3RhciBjZW50cmFsaXphZGEgZW4gbMOtZGVyZXMgamVyw6FycXVpY29zIG8gc2UgcHJvZHVjZSBzb2xvIGFsIGZpbmFsIGRlIHVuIGNpY2xvIGRlIHRyYWJham8sIGVuIFNjcnVtIHkgb3RyYXMgbWV0b2RvbG9nw61hcyDDoWdpbGVzLCBlbCBmZWVkYmFjayBlcyBkaXN0cmlidWlkbywgZnJlY3VlbnRlIHkgaG9yaXpvbnRhbC4gQ3VhbHF1aWVyIG1pZW1icm8gZGVsIGVxdWlwbyBwdWVkZSBvZnJlY2VybG8gbyBzb2xpY2l0YXJsbywgcHJvbW92aWVuZG8gdW4gZmx1am8gZGUgbWVqb3JhIGNvbnRpbnVhLgoKICAgIC8vIEJsb3F1ZTogcMOhcnJhZm8gc2ltcGxlCiAgICBoMi5tYi00IENhcmFjdGVyw61zdGljYXMgZGUgdW5hIGN1bHR1cmEgZGUgZmVlZGJhY2sgc2FsdWRhYmxlCiAgICBwLm1iLTQgVW5hIGN1bHR1cmEgZGUgcmV0cm9hbGltZW50YWNpw7NuIGVmZWN0aXZhIGVuIGNvbnRleHRvcyDDoWdpbGVzLCBwcmVzZW50YSBsYXMgc2lndWllbnRlcyBjYXJhY3RlcsOtc3RpY2FzOgoKICAgIC8vIEJsb3F1ZTogc2x5ZmMgODo0CiAgICAuYmctZnVsbC13aWR0aC5iZy1mb25kby0yCiAgICAgIC5weC00LnB4LW1kLTUucGItbWQtMy5wdC1tZC01CiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLm1iLTUuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTgKCiAgICAgICAgICAgIFNseWRlckYoY29sdW1uYXM9ImNvbC0xMiBjb2wtbGctNiIpCiAgICAgICAgICAgICAgLmJnLXdoaXRlLnAtNC5zaGFkb3ctc20uaC0xMDAKICAgICAgICAgICAgICAgIGltZy5kLWJsb2NrLm14LWF1dG8ubWItMyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzQuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpCiAgICAgICAgICAgICAgICBoNS50ZXh0LWNlbnRlciAjW3N0cm9uZyBTZWd1cmlkYWQgcHNpY29sw7NnaWNhXQogICAgICAgICAgICAgICAgcC5tYi0wIExvcyBtaWVtYnJvcyBkZWwgZXF1aXBvIHNlIHNpZW50ZW4gc2VndXJvcyBhbCBleHByZXNhciBvcGluaW9uZXMgc2luIHRlbW9yIGEgcmVwcmVzYWxpYXMuCgogICAgICAgICAgICAgIC5iZy13aGl0ZS5wLTQuc2hhZG93LXNtLmgtMTAwCiAgICAgICAgICAgICAgICBpbWcuZC1ibG9jay5teC1hdXRvLm1iLTMoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy81LnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKQogICAgICAgICAgICAgICAgaDUudGV4dC1jZW50ZXIgI1tzdHJvbmcgUmVjaXByb2NpZGFkXQogICAgICAgICAgICAgICAgcC5tYi0wIEVsIGZlZWRiYWNrIHNlIGRhIHkgc2UgcmVjaWJlIGRlIGZvcm1hIGJpbGF0ZXJhbDsgbm8gZXMgaW1wdWVzdG8sIHNpbm8gY29sYWJvcmF0aXZvLgoKICAgICAgICAgICAgICAuYmctd2hpdGUucC00LnNoYWRvdy1zbS5oLTEwMAogICAgICAgICAgICAgICAgaW1nLmQtYmxvY2subXgtYXV0by5tYi0zKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvNi5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikKICAgICAgICAgICAgICAgIGg1LnRleHQtY2VudGVyICNbc3Ryb25nIE9wb3J0dW5pZGFkXQogICAgICAgICAgICAgICAgcC5tYi0wIExhIHJldHJvYWxpbWVudGFjacOzbiBlcyBwcm9wb3JjaW9uYWRhIGVuIGVsIG1vbWVudG8gYWRlY3VhZG8sIGlkZWFsbWVudGUgZGUgbWFuZXJhIGlubWVkaWF0YSBvIGVuIGNpY2xvcyBkZWZpbmlkb3MgKGNvbW8gbGFzIHJldHJvc3BlY3RpdmFzKS4KCiAgICAgICAgICAgICAgLmJnLXdoaXRlLnAtNC5zaGFkb3ctc20uaC0xMDAKICAgICAgICAgICAgICAgIGltZy5kLWJsb2NrLm14LWF1dG8ubWItMyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzcuc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpCiAgICAgICAgICAgICAgICBoNS50ZXh0LWNlbnRlciAjW3N0cm9uZyBDbGFyaWRhZF0KICAgICAgICAgICAgICAgIHAubWItMCBTZSBlbmZvY2EgZW4gaGVjaG9zIG9ic2VydmFibGVzIHkgbm8gZW4ganVpY2lvcyBwZXJzb25hbGVzLiBFc3RvIGV2aXRhIG1hbGVudGVuZGlkb3MgeSBwcm9tdWV2ZSBlbCBhcHJlbmRpemFqZS4KCiAgICAgICAgICAgICAgLmJnLXdoaXRlLnAtNC5zaGFkb3ctc20uaC0xMDAKICAgICAgICAgICAgICAgIGltZy5kLWJsb2NrLm14LWF1dG8ubWItMyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzguc3ZnIiwgc3R5bGU9Im1heC13aWR0aDogOTBweCIpCiAgICAgICAgICAgICAgICBoNS50ZXh0LWNlbnRlciAjW3N0cm9uZyBPcmllbnRhY2nDs24gYSBsYSBtZWpvcmFdCiAgICAgICAgICAgICAgICBwLm1iLTAgRWwgcHJvcMOzc2l0byBwcmluY2lwYWwgbm8gZXMgY29ycmVnaXIsIHNpbm8gaGFjZXIgY3JlY2VyLCB0YW50byBhbCBpbmRpdmlkdW8gY29tbyBhbCBlcXVpcG8uCgogICAgICAgICAgLmNvbC1sZy00CiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzkucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKQoKICAgIC8vIEJsb3F1ZTogaW1hZ2VuLWNvbG9yLXRleHRvCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy00CiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy8xMC5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgIC5jb2wtbGctOAogICAgICAgIC5iZy1jb2xvci02LnAtNC5weS1sZy01KGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi01CiAgICAgICAgICBwLm1iLTAgRWplbXBsbyBwcsOhY3RpY28uIFVuIHNwcmludCBjb24gY3VsdHVyYSBkZSBmZWVkYmFjay4gRW4gdW4gZXF1aXBvIFNjcnVtIHF1ZSBoYSBpbnRlZ3JhZG8gZXN0YSBjdWx0dXJhLCBkdXJhbnRlIHVuYSByZXRyb3NwZWN0aXZhLCB1biBkZXNhcnJvbGxhZG9yIGNvbWVudGEgcXVlIGxhIGludGVncmFjacOzbiBjb250aW51YSBoYSBmYWxsYWRvIHZhcmlhcyB2ZWNlcyBwb3IgZmFsdGEgZGUgcHJ1ZWJhcyBhdXRvbWF0aXphZGFzLiBFbiBsdWdhciBkZSB0b21hciBlc3RvIGNvbW8gdW5hIGNyw610aWNhIHBlcnNvbmFsLCBlbCBlcXVpcG8gYWdyYWRlY2UgZWwgY29tZW50YXJpbyB5IHByb3BvbmUgdW5hIGFjY2nDs24gY29uY3JldGE6IGFzaWduYXIgdGllbXBvIGVuIGVsIHNpZ3VpZW50ZSBzcHJpbnQsIHBhcmEgcmVmb3J6YXIgbG9zIHRlc3QgdW5pdGFyaW9zLgogICAgICAgIAogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIEVzdGUgdGlwbyBkZSBpbnRlcmNhbWJpbyB0cmFuc2Zvcm1hIGxhIGNyw610aWNhIGVuIGNvbGFib3JhY2nDs24sIHkgcmVmdWVyemEgbGEgcmVzcG9uc2FiaWxpZGFkIGNvbXBhcnRpZGEgcG9yIGxhIGNhbGlkYWQgZGVsIHByb2R1Y3RvLgoKICAgIC8vIEJsb3F1ZTogcMOhcnJhZm8gc2ltcGxlCiAgICBoMi5tYi00IE9ic3TDoWN1bG9zIGNvbXVuZXMgcGFyYSB1bmEgY3VsdHVyYSBkZSBmZWVkYmFjayB5IGPDs21vIHN1cGVyYXJsb3MKCiAgICAvLyBCbG9xdWU6IHRleHRvLWNvbG9yLWltYWdlbgogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtbGctOAogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTUgUGVzZSBhIHN1cyBiZW5lZmljaW9zLCBlc3RhYmxlY2VyIHVuYSBjdWx0dXJhIHPDs2xpZGEgZGUgcmV0cm9hbGltZW50YWNpw7NuLCBlbmZyZW50YSBkZXNhZsOtb3MuIEFsZ3Vub3MgZGUgbG9zIG3DoXMgY29tdW5lcyBpbmNsdXllbjoKCiAgICAgICAgLmJnLWNvbG9yLTQucC00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi00CiAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IuY29sb3ItZGFyay5tYi00CiAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICB8IFRlbW9yIGEgaGVyaXIgc2VudGltaWVudG9zIG8gY3JlYXIgY29uZmxpY3Rvcy4KICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgIHwgRmFsdGEgZGUgZm9ybWFjacOzbiBlbiBjw7NtbyBkYXIgZmVlZGJhY2sgY29uc3RydWN0aXZvLgogICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgfCBEZXNjb25maWFuemEgZW50cmUgbG9zIG1pZW1icm9zIGRlbCBlcXVpcG8uCiAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICB8IEFtYmllbnRlcyBkb25kZSBsb3MgZXJyb3JlcyBzb24gcGVuYWxpemFkb3MgZW4gbHVnYXIgZGUgYW5hbGl6YWRvcy4KICAgICAgICAgIAogICAgICAgICAgcC5tYi00IFBhcmEgc3VwZXJhcmxvcywgbG9zIGVxdWlwb3MgcHVlZGVuIGFkb3B0YXIgZXN0cmF0ZWdpYXMgY29tbzoKICAgICAgICAgIAogICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yLmNvbG9yLWRhcmsKICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgIHwgQ2FwYWNpdGFjacOzbiBlbiBoYWJpbGlkYWRlcyBjb211bmljYXRpdmFzIHkgZXNjdWNoYSBhY3RpdmEuCiAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICB8IEltcGxlbWVudGFjacOzbiBkZSBub3JtYXMgZGUgZXF1aXBvIHF1ZSB2YWxvcmVuIGxhIHNpbmNlcmlkYWQgY29uIHJlc3BldG8uCiAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICB8IFVzbyBkZSBtYXJjb3MgY29tbyAiU3RhcnQtU3RvcC1Db250aW51ZSIgbyAiU0JJIChTaXR1YXRpb24tQmVoYXZpb3ItSW1wYWN0KSIgcGFyYSBlc3RydWN0dXJhciBlbCBmZWVkYmFjay4KICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgIHwgUmVjb25vY2ltaWVudG8gYWJpZXJ0byBkZSBsb3MgZXJyb3JlcyBjb21vIG9wb3J0dW5pZGFkZXMgZGUgbWVqb3JhLgogICAgICAgIAogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIExhIGN1bHR1cmEgZGUgcmV0cm9hbGltZW50YWNpw7NuIGVzIG11Y2hvIG3DoXMgcXVlIHVuIGNvbXBvbmVudGUgdMOpY25pY28gZW4gbG9zIGVxdWlwb3Mgw6FnaWxlczsgZXMgdW5hIGhhYmlsaWRhZCBjb2xlY3RpdmEgZXN0cmF0w6lnaWNhLiBDdWFuZG8gc2UgY3VsdGl2YSBhZGVjdWFkYW1lbnRlLCBzZSBjb252aWVydGUgZW4gdW4gY2F0YWxpemFkb3IgZGVsIGFwcmVuZGl6YWplIG9yZ2FuaXphY2lvbmFsLCBtZWpvcmEgbGEgY29oZXNpw7NuIGRlbCBlcXVpcG8sIGVsZXZhIGxhIGNhbGlkYWQgZGVsIHByb2R1Y3RvIHkgcG90ZW5jaWEgZWwgY3JlY2ltaWVudG8gcHJvZmVzaW9uYWwgZGUgY2FkYSBpbnRlZ3JhbnRlLiBGb21lbnRhciBlc3RhIGN1bHR1cmEgcmVxdWllcmUgY29uc3RhbmNpYSwgbGlkZXJhemdvIGRpc3RyaWJ1aWRvIHkgdW4gZW50b3JubyBxdWUgcHJlbWllIGxhIGFwZXJ0dXJhIGFsIGNhbWJpby4KICAgICAgLmNvbC1sZy00CiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy8xMS5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCgogICAgLy8gQmxvcXVlOiB0aXR1bG8tc2VndW5kbwogICAgI3RfM18yLnRpdHVsby1zZWd1bmRvKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgaDIgI1tzcGFuIDMuMl0gVGlwb3MgZGUgZmVlZGJhY2sKCiAgICBwLm1iLTQgTGEgcmV0cm9hbGltZW50YWNpw7NuIGVzIHVuIHBpbGFyIGZ1bmRhbWVudGFsIGVuIGVsIHRyYWJham8gY29sYWJvcmF0aXZvIGRlIGxvcyBlcXVpcG9zIMOhZ2lsZXMsIHlhIHF1ZSBwZXJtaXRlIGZvcnRhbGVjZXIgbGEgY29tdW5pY2FjacOzbiwgZGV0ZWN0YXIgw6FyZWFzIGRlIG1lam9yYSB5IGNvbnNvbGlkYXIgYXByZW5kaXphamVzLgoKICAgIC8vIEJsb3F1ZTogYW5leG8taW1nCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci01Lm1iLWxnLTUKICAgICAgLnB4LTQucC1tZC01CiAgICAgICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgLmNvbC1sZy00CiAgICAgICAgICAgIGZpZ3VyZShkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYTMvMTIucG5nJywgYWx0PScnKQoKICAgICAgICAgIC5jb2wtbGctOC50ZXh0LXdoaXRlCiAgICAgICAgICAgIGgyLm1iLTQoZGF0YS1hb3M9ImZsaXAtdXAiKSBUaXBvcyBkZSBmZWVkYmFjawogICAgICAgICAgICBwLm1iLTQoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKSBFbiBlbCBQREYgVGlwb3MgZGUgZmVlZGJhY2ssIHNlIHByZXNlbnRhbiBkaWZlcmVudGVzIGZvcm1hcyBkZSByZXRyb2FsaW1lbnRhY2nDs24sIGZvcm1hbCwgaW5mb3JtYWwsIGlubWVkaWF0YSB5IGRpZmVyaWRhLCBxdWUgcHVlZGVuIGFwbGljYXJzZSBlc3RyYXTDqWdpY2FtZW50ZSwgc2Vnw7puIGVsIGNvbnRleHRvLCBlbCBvYmpldGl2byB5IGVsIG1vbWVudG8gZW4gcXVlIG9jdXJyZW4gbG9zIGV2ZW50b3MgZGVudHJvIGRlbCBjaWNsbyDDoWdpbC4gQ29tcHJlbmRlciBlc3RhcyBtb2RhbGlkYWRlcyB5IHNhYmVyIGN1w6FuZG8gdXRpbGl6YXJsYXMsIGZhdm9yZWNlIGVudG9ybm9zIG3DoXMgY29sYWJvcmF0aXZvcywgcHJvYWN0aXZvcyB5IG9yaWVudGFkb3MgYSBsYSBtZWpvcmEgY29udGludWEuCgogICAgICAgICAgICBhLmFuZXhvLm1iLTQuYmctd2hpdGUudy1maXQoOmhyZWY9Im9idGVuZXJMaW5rKCcvZG93bmxvYWRzL0FuZXhvXzUucGRmJykiIHRhcmdldD0iX2JsYW5rIikoZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICAgICAgICAgIC5hbmV4b19faWNvbm8oOnN0eWxlPSJ7J2JhY2tncm91bmQtY29sb3InOiAnI0ZDREZEQid9IikKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL3RlbXBsYXRlL2ljb25vLXBkZi5zdmciKQogICAgICAgICAgICAgIC5hbmV4b19fdGV4dG8KICAgICAgICAgICAgICAgIHAubWItMCBUaXBvcyBkZSBmZWVkYmFjawoKICAgIC8vIEJsb3F1ZTogdGl0dWxvLXNlZ3VuZG8KICAgICN0XzNfMy50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAzLjNdIFTDqWNuaWNhcyBwYXJhIGJyaW5kYXIgeSByZWNpYmlyIGZlZWRiYWNrIGVmaWNhegoKICAgIC8vIEJsb3F1ZTogaWNvbm9ibG9xdWUtdGV4dG8taW1hZ2VuCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy04CiAgICAgICAgLmJnLWNvbG9yLTYucC00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi00CiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLXN0YXJ0CiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzEzLnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICBwLm1iLTAgTGEgcmV0cm9hbGltZW50YWNpw7NuIGVmaWNheiBubyBlcyB1biBzaW1wbGUgaW50ZXJjYW1iaW8gZGUgb3BpbmlvbmVzOyBlcyB1bmEgaGVycmFtaWVudGEgZXN0cmF0w6lnaWNhIHBhcmEgaW1wdWxzYXIgZWwgYXByZW5kaXphamUsIGZvcnRhbGVjZXIgbGEgY29uZmlhbnphIGRlbCBlcXVpcG8geSBmb21lbnRhciBsYSBtZWpvcmEgY29udGludWEuIEVuIGVsIG1hcmNvIGRlIGxhcyBtZXRvZG9sb2fDrWFzIMOhZ2lsZXMsIGRvbmRlIGxhIGNvbGFib3JhY2nDs24gZXMgdW4gcGlsYXIgZnVuZGFtZW50YWwsIGFwcmVuZGVyIGEgZGFyIHkgcmVjaWJpciBmZWVkYmFjayBkZSBtYW5lcmEgZWZlY3RpdmEsIGVzIHVuYSBjb21wZXRlbmNpYSBjbGF2ZSBxdWUgZGViZSBjdWx0aXZhcnNlIGNvbiBpbnRlbmNpw7NuLCBwcsOhY3RpY2EgeSBlc3RydWN0dXJhLgogICAgICAgIAogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpIEVsIGZlZWRiYWNrIG1hbCBlamVjdXRhZG8gcHVlZGUgZ2VuZXJhciBmcmljY2lvbmVzLCBkZWZlbnNpdmlkYWQgbyBkZXNtb3RpdmFjacOzbi4gUG9yIGVsIGNvbnRyYXJpbywgdW4gZmVlZGJhY2sgYmllbiBvZnJlY2lkbyB5IGFkZWN1YWRhbWVudGUgcmVjaWJpZG8sIHB1ZWRlIGNvbnZlcnRpcnNlIGVuIGNhdGFsaXphZG9yIGRlIGNyZWNpbWllbnRvIHBlcnNvbmFsIHkgY29sZWN0aXZvLgogICAgICAuY29sLWxnLTQKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWEzLzE0LnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKCiAgICAvLyBCbG9xdWU6IGFjb3JkZW9uLWltZwogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtbGctNAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvMTUucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAuY29sLWxnLTgKICAgICAgICBBY29yZGlvbkEodGlwbz0iYiIpLm1iLTUKICAgICAgICAgIC5kaXYodGl0dWxvPSJUw6ljbmljYSBkZWwgc8OhbmR3aWNoIChwb3NpdGl2byDigJMgbWVqb3JhIOKAkyBwb3NpdGl2bykiKQogICAgICAgICAgICBwIEVzdGEgdMOpY25pY2EgY29uc2lzdGUgZW4gZXN0cnVjdHVyYXIgZWwgbWVuc2FqZSBlbiB0cmVzIHBhcnRlczogY29tZW56YXIgY29uIHVuYSBvYnNlcnZhY2nDs24gcG9zaXRpdmEsIGx1ZWdvIHNlw7FhbGFyIGVsIGFzcGVjdG8gYSBtZWpvcmFyLCB5IGZpbmFsaXphciBjb24gb3RybyBjb21lbnRhcmlvIHBvc2l0aXZvLiBTdSBwcm9ww7NzaXRvIGVzIHJlZHVjaXIgbGEgcmVzaXN0ZW5jaWEgZGVsIHJlY2VwdG9yIHkgZW5tYXJjYXIgbGEgbWVqb3JhIGRlbnRybyBkZSB1bmEgdmlzacOzbiBkZSBhcHJlY2lvIHkgYXBveW8uCiAgICAgICAgICAgIHAgI1tzdHJvbmcgRWplbXBsby5dICJBcHJlY2lvIG11Y2hvIHR1IGVzZnVlcnpvIHBvciBjdW1wbGlyIGNvbiBsYXMgdGFyZWFzIGRlbCBzcHJpbnQgeSBjw7NtbyBhcG95YXN0ZSBhIHR1cyBjb21wYcOxZXJvcy4gT2JzZXJ2w6kgcXVlIGFsZ3VuYXMgaGlzdG9yaWFzIHNlIHF1ZWRhcm9uIHNpbiBkb2N1bWVudGFyIGVuIENvbmZsdWVuY2UsIGxvIHF1ZSBwb2Ryw61hIGRpZmljdWx0YXIgbGEgdHJhemFiaWxpZGFkLiBQZXJvIGVuIGdlbmVyYWwsIHR1IGluaWNpYXRpdmEgaGEgc2lkbyBtdXkgdmFsaW9zYSBwYXJhIGVsIGVxdWlwbyIuCiAgICAgICAgICAgIHAgI1tzdHJvbmcgVmVudGFqYV06IGdlbmVyYSB1biBjbGltYSBkZSByZWNlcHRpdmlkYWQuCiAgICAgICAgICAgIHAgI1tzdHJvbmcgUmllc2dvXTogc2kgc2UgYWJ1c2EsIHB1ZWRlIHBlcmNpYmlyc2UgY29tbyBtYW5pcHVsYWNpw7NuLgogICAgICAgICAgCiAgICAgICAgICAuZGl2KHRpdHVsbz0iVMOpY25pY2EgU0JJIChTaXR1YXRpb24g4oCTIEJlaGF2aW9yIOKAkyBJbXBhY3QpIikKICAgICAgICAgICAgcCBFc3RhIHTDqWNuaWNhIHByb3BvbmUgZGVzY3JpYmlyIGRlIGZvcm1hIGNsYXJhOgogICAgICAgICAgICB1bC5saXN0YS11bC0tY29sb3IuY29sb3ItZGFyay5tYi0zCiAgICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgICB8ICNbc3Ryb25nIFNpdHVhdGlvbl06IGVsIGNvbnRleHRvIGVzcGVjw61maWNvLgogICAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgICAgfCAjW3N0cm9uZyBCZWhhdmlvcl06IGxvIHF1ZSBsYSBwZXJzb25hIGhpem8gbyBkaWpvLgogICAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgICAgfCAjW3N0cm9uZyBJbXBhY3RdOiBsYSBjb25zZWN1ZW5jaWEgZ2VuZXJhZGEgcG9yIGVzYSBhY2Npw7NuLgogICAgICAgICAgICBwIFBlcm1pdGUgZGFyIHVuIGZlZWRiYWNrIG9iamV0aXZvLCBjb25jcmV0byB5IGNlbnRyYWRvIGVuIGhlY2hvcywgc2luIGp1aWNpb3MgcGVyc29uYWxlcy4KICAgICAgICAgICAgcCAjW3N0cm9uZyBFamVtcGxvXS4gIkVuIGxhIGRhaWx5IGRlIGhveSAoU2l0dWFjacOzbiksIGN1YW5kbyBpbnRlcnJ1bXBpc3RlIGEgSnVhbiBtaWVudHJhcyBleHBsaWNhYmEgc3UgdGFyZWEgKENvbXBvcnRhbWllbnRvKSwgw6lsIHNlIG1vc3Ryw7MgaW5jw7Ntb2RvIHkgcGVyZGnDsyBlbCBoaWxvIGRlIGxvIHF1ZSBkZWPDrWEgKEltcGFjdG8pIi4KICAgICAgICAgICAgcCAjW3N0cm9uZyBWZW50YWphXTogZWxpbWluYSBsYSBhbWJpZ8O8ZWRhZCB5IHNlIGVuZm9jYSBlbiBsbyBvYnNlcnZhYmxlLgogICAgICAgICAgICBwICNbc3Ryb25nIElkZWFsXTogcGFyYSBzaXR1YWNpb25lcyBkZWxpY2FkYXMgbyBwb3RlbmNpYWxtZW50ZSBjb25mbGljdGl2YXMuCgogICAgICAgICAgLmRpdih0aXR1bG89IlTDqWNuaWNhIFwiU1RPUCDigJMgU1RBUlQg4oCTIENPTlRJTlVFXCIiKQogICAgICAgICAgICBwIE11eSB1c2FkYSB0YW1iacOpbiBlbiByZXRyb3NwZWN0aXZhcywgZXN0YSB0w6ljbmljYSBheXVkYSBhIGVzdHJ1Y3R1cmFyIGZlZWRiYWNrIGVuIHRyZXMgcHJlZ3VudGFzOgogICAgICAgICAgICBwIC0gwr9RdcOpIGRlYmUgZGV0ZW5lcnNlIHBvcnF1ZSBubyBlc3TDoSBmdW5jaW9uYW5kbz8KICAgICAgICAgICAgcCAtIMK/UXXDqSBkZWJlIGVtcGV6YXIgYSBoYWNlcnNlIHF1ZSBhw7puIG5vIHNlIGhhY2U/CiAgICAgICAgICAgIHAgLSDCv1F1w6kgZGViZSBjb250aW51YXIgcG9ycXVlIGVzdMOhIGZ1bmNpb25hbmRvIGJpZW4/CiAgICAgICAgICAgIHAgRmFjaWxpdGEgdW4gZW5mb3F1ZSBlcXVpbGlicmFkbyB5IG9yaWVudGFkbyBhIGxhIGFjY2nDs24uCiAgICAgICAgICAgIHAgI1tzdHJvbmcgRWplbXBsbyBlbiBlcXVpcG8gU2NydW1dCiAgICAgICAgICAgIHAgLSAjW3N0cm9uZyBTVE9QXTogY2FtYmlhciBwcmlvcmlkYWRlcyBhIG1pdGFkIGRlbCBzcHJpbnQgc2luIGNvb3JkaW5hY2nDs24uCiAgICAgICAgICAgIHAgLSAjW3N0cm9uZyBTVEFSVF06IGludm9sdWNyYXIgYWwgY2xpZW50ZSBkZXNkZSBlbCBwcmltZXIgcmVmaW5hbWllbnRvLgogICAgICAgICAgICBwIC0gI1tzdHJvbmcgQ09OVElOVUVdOiBjZWxlYnJhciBsYXMgcGVxdWXDsWFzIHZpY3RvcmlhcyBhbCBmaW5hbGl6YXIgZWwgc3ByaW50LgogICAgICAgICAgICBwICNbc3Ryb25nIFZlbnRhamFdOiBmb21lbnRhIHJlZmxleGnDs24gc2luIGNyw610aWNhcyBkZXN0cnVjdGl2YXMuCiAgICAgICAgICAgIHAgI1tzdHJvbmcgSWRlYWxdOiBwYXJhIGRpbsOhbWljYXMgZGUgZ3J1cG8geSBzZXNpb25lcyBwZXJpw7NkaWNhcy4KCiAgICAgICAgICAuZGl2KHRpdHVsbz0iVMOpY25pY2EgQ09JTiAoQ29udGV4dCDigJMgT2JzZXJ2YXRpb24g4oCTIEltcGFjdCDigJMgTmV4dCBzdGVwcykiKQogICAgICAgICAgICBwIFVuYSBldm9sdWNpw7NuIGRlIFNCSSBxdWUgYcOxYWRlIHVuIGN1YXJ0byBjb21wb25lbnRlOiBsYSBhY2Npw7NuIGZ1dHVyYS4gU2UgZW5mb2NhIG5vIHNvbG8gZW4gbG8gb2N1cnJpZG8sIHNpbm8gZW4gY8OzbW8gc2UgcHVlZGUgYXZhbnphci4KICAgICAgICAgICAgcCAjW3N0cm9uZyBFamVtcGxvXS4gIkR1cmFudGUgZWwgc3ByaW50IHBsYW5uaW5nIChDb250ZXh0byksIHZpIHF1ZSBpbnRlcnJ1bXBpc3RlIGFsIFNjcnVtIE1hc3RlciB2YXJpYXMgdmVjZXMgKE9ic2VydmFjacOzbiksIGxvIGN1YWwgZ2VuZXLDsyBjb25mdXNpw7NuIGVuIGxhIGFzaWduYWNpw7NuIGRlIHRhcmVhcyAoSW1wYWN0bykuIFRlIHByb3BvbmdvIHF1ZSBsYSBwcsOzeGltYSB2ZXogYW5vdGVtb3MgZHVkYXMgeSBsYXMgYWJvcmRlbW9zIGFsIGZpbmFsIChQcsOzeGltbyBwYXNvKSIuCiAgICAgICAgICAgIHAgI1tzdHJvbmcgVmVudGFqYV06IGltcHVsc2EgdW4gY2FtYmlvIGNvbmNyZXRvIGVuIGVsIGNvbXBvcnRhbWllbnRvIGZ1dHVyby4KICAgICAgICAgICAgcCAjW3N0cm9uZyBJZGVhbF06IHBhcmEgc2l0dWFjaW9uZXMgcmVjdXJyZW50ZXMgcXVlIHJlcXVpZXJlbiBjb3JyZWNjacOzbi4KCiAgICAvLyBCbG9xdWU6IGFjb3JkZW9uLWltZwogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtbGctOAogICAgICAgIEFjb3JkaW9uQSh0aXBvPSJiIikubWItNQogICAgICAgICAgLmRpdih0aXR1bG89IlTDqWNuaWNhIGRlIFwiZmVlZGJhY2sgZmVlZGZvcndhcmRcIiIpCiAgICAgICAgICAgIHAgRXN0YSB0w6ljbmljYSBjYW1iaWEgZWwgZm9jbyBkZSBsbyBxdWUgc2UgaGl6byBtYWwgaGFjaWEgbG8gcXVlIHB1ZWRlIGhhY2Vyc2UgbWVqb3IgZW4gZWwgZnV0dXJvLiBFbiBsdWdhciBkZSByZXRyb2FsaW1lbnRhciBjb24gYmFzZSBlbiBlcnJvcmVzIHBhc2Fkb3MsIHNlIHByb3llY3RhbiBvcG9ydHVuaWRhZGVzIGRlIGRlc2Fycm9sbG8uCiAgICAgICAgICAgIHAgI1tzdHJvbmcgRWplbXBsb10uIEVuIGx1Z2FyIGRlIGRlY2lyOiAiTm8gY3VtcGxpc3RlIGNvbiBsb3MgY3JpdGVyaW9zIGRlIGFjZXB0YWNpw7NuIiwgc2UgcGxhbnRlYTogIkVuIGxvcyBwcsOzeGltb3Mgc3ByaW50cywgwr9jw7NtbyBwb2Ryw61hcyBhc2VndXJhcnRlIGRlIHZhbGlkYXIgbG9zIGNyaXRlcmlvcyBjb24gZWwgUHJvZHVjdCBPd25lciBhbnRlcyBkZSBjZXJyYXIgbGEgaGlzdG9yaWE/Ii4KICAgICAgICAgICAgcCAjW3N0cm9uZyBWZW50YWphXTogZXZpdGEgY3VscGFiaWxpemFjacOzbiB5IGZvcnRhbGVjZSBlbCBkZXNhcnJvbGxvLgogICAgICAgICAgICBwICNbc3Ryb25nIElkZWFsXTogZW4gY29udGV4dG9zIGRvbmRlIGxhIGN1bHR1cmEgZGUgYXByZW5kaXphamUgZXMgcHJpb3JpdGFyaWEuCgogICAgICAgICAgLmRpdih0aXR1bG89IlTDqWNuaWNhIFwiRmVlZGJhY2sgZW4gdW4gbWludXRvXCIgKE9uZSBNaW51dGUgRmVlZGJhY2spIikKICAgICAgICAgICAgcCBQb3B1bGFyaXphZGEgZW4gYW1iaWVudGVzIMOhZ2lsZXMgZGUgcml0bW8gYWNlbGVyYWRvLCBlc3RhIHTDqWNuaWNhIGNvbnNpc3RlIGVuIGJyaW5kYXIgcmV0cm9hbGltZW50YWNpw7NuIGlubWVkaWF0YSwgYnJldmUgeSBlbmZvY2FkYSwgaWRlYWwgcGFyYSBlbnRvcm5vcyBkZSBhbHRhIGl0ZXJhY2nDs24gY29tbyBlbCBkZXNhcnJvbGxvIGRlIHNvZnR3YXJlLgogICAgICAgICAgICBwICNbc3Ryb25nIEVqZW1wbG9dLiBBbCBmaW5hbGl6YXIgdW5hIGRlbW86ICJCdWVuIHRyYWJham8gbW9zdHJhbmRvIGPDs21vIHNlIHJlc29sdmnDsyBlbCBidWcuIExhIGNsYXJpZGFkIGNvbiBsYSBxdWUgZXhwbGljYXN0ZSBlbCBpbXBhY3RvIGVuIHByb2R1Y2Npw7NuIGZ1ZSBleGNlbGVudGUiLgogICAgICAgICAgICBwICNbc3Ryb25nIFZlbnRhamFdOiBwcm9tdWV2ZSBhZ2lsaWRhZCB5IHJlZnVlcnpvIGlubWVkaWF0by4KICAgICAgICAgICAgcCAjW3N0cm9uZyBJZGVhbF06IHBhcmEgcmVjb25vY2VyIGFjY2lvbmVzIHBlcXVlw7FhcyB5IGNvdGlkaWFuYXMuCgogICAgICAgICAgLmRpdih0aXR1bG89IlJlY2liaXIgZmVlZGJhY2s6IGFjdGl0dWQgeSBoYWJpbGlkYWRlcyBkZWwgcmVjZXB0b3IiKQogICAgICAgICAgICBwIEJyaW5kYXIgcmV0cm9hbGltZW50YWNpw7NuIGVmZWN0aXZhIG5vIGVzIHN1ZmljaWVudGUgc2kgcXVpZW4gbGEgcmVjaWJlIG5vIGVzdMOhIHByZXBhcmFkbyBlbW9jaW9uYWxtZW50ZSBvIGNvZ25pdGl2YW1lbnRlIHBhcmEgZXNjdWNoYXJsYS4gUG9yIGVsbG8sIGRlc2Fycm9sbGFyIGhhYmlsaWRhZGVzIGNvbW8gbGEgZXNjdWNoYSBhY3RpdmEsIGxhIGdlc3Rpw7NuIGVtb2Npb25hbCB5IGVsIGFncmFkZWNpbWllbnRvIHBvciBsYSBtZWpvcmEgc29uIGZ1bmRhbWVudGFsZXMuCiAgICAgIC5jb2wtbGctNAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTMvMTYucG5nIiwgZGF0YS1hb3M9Inpvb20taW4iKQoKICAgIC8vIEJsb3F1ZTogaW1hZ2VuLXRleHRvLWNvbG9yCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy00CiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMy8xNy5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpCiAgICAgIC5jb2wtbGctOAogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTQgQnVlbmFzIHByw6FjdGljYXMgcGFyYSByZWNpYmlyIGZlZWRiYWNrOgoKICAgICAgICAuYmctY29sb3ItMS5wLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTQKICAgICAgICAgIHVsLmxpc3RhLXVsLS1jb2xvci5jb2xvci1kYXJrCiAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICB8IEVzY3VjaGFyIHNpbiBpbnRlcnJ1bXBpci4KICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgIHwgRXZpdGFyIHBvbmVyc2UgYSBsYSBkZWZlbnNpdmEuCiAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICB8IEhhY2VyIHByZWd1bnRhcyBhY2xhcmF0b3JpYXMgc2kgYWxnbyBubyBxdWVkYSBjbGFyby4KICAgICAgICAgICAgbGkubWItMAogICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgIHwgQWdyYWRlY2VyIGVsIGZlZWRiYWNrIHJlY2liaWRvLgogICAgICAgICAgICBsaS5tYi0wCiAgICAgICAgICAgICAgaS5mYXMuZmEtYXJyb3ctY2lyY2xlLXJpZ2h0CiAgICAgICAgICAgICAgfCBSZWZsZXhpb25hciBhbnRlcyBkZSBhY3R1YXIuCiAgICAgICAgCiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikgRWwgZmVlZGJhY2sgZWZpY2F6IGVzIHVuYSBoZXJyYW1pZW50YSBwb2Rlcm9zYSBjdWFuZG8gc2UgY29tcHJlbmRlIGNvbW8gdW4gcHJvY2VzbyBiaWxhdGVyYWwsIGVtcMOhdGljbyB5IGNvbnN0cnVjdGl2by4gVGFudG8gcXVpZW4gZGEgY29tbyBxdWllbiByZWNpYmUgZGViZW4gYXN1bWlyIHVuIHJvbCBwcm9hY3Rpdm8geSByZXNwZXR1b3NvLCBhcGxpY2FuZG8gdMOpY25pY2FzIHF1ZSBzZSBhZGFwdGVuIGFsIGNvbnRleHRvIHkgYWwgbml2ZWwgZGUgY29uZmlhbnphIGRlbCBlcXVpcG8uIEVzdGFzIHTDqWNuaWNhcyBubyBzb2xvIG1lam9yYW4gbGEgY29tdW5pY2FjacOzbiBpbnRlcm5hLCBzaW5vIHF1ZSBhdW1lbnRhbiBsYSBtYWR1cmV6IMOhZ2lsIGRlbCBlcXVpcG8sIHByb211ZXZlbiBsYSBleGNlbGVuY2lhIHkgY29udHJpYnV5ZW4gYSBsYSBldm9sdWNpw7NuIHRhbnRvIGRlbCBwcm9kdWN0byBjb21vIGRlIGxhcyBwZXJzb25hcy4KCiAgICAvLyBCbG9xdWU6IHRpdHVsby1zZWd1bmRvCiAgICAjdF8zXzQudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMy40XSBJbnRlZ3JhY2nDs24gZGVsIGZlZWRiYWNrIGVuIGxhIG1lam9yYSBkZWwgcHJvZHVjdG8geSBkZWwgZXF1aXBvCgogICAgcC5tYi00IExhIHJldHJvYWxpbWVudGFjacOzbiBlcyB1biBtb3RvciBlc2VuY2lhbCBkZSBsYSBtZWpvcmEgY29udGludWEgZW4gbG9zIG1hcmNvcyBkZSB0cmFiYWpvIMOhZ2lsZXMsIHlhIHF1ZSBwZXJtaXRlIGFqdXN0YXIgdGFudG8gZWwgZGVzYXJyb2xsbyBkZWwgcHJvZHVjdG8gY29tbyBsYSBkaW7DoW1pY2EgZGVsIGVxdWlwbyBkZSBmb3JtYSBvcG9ydHVuYSB5IGVzdHJhdMOpZ2ljYS4KCiAgICAvLyBCbG9xdWU6IGFuZXhvLWltZwogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItNS5tYi1sZy01CiAgICAgIC5weC00LnAtbWQtNQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctNAogICAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWEzLzE4LnBuZycsIGFsdD0nJykKCiAgICAgICAgICAuY29sLWxnLTgudGV4dC13aGl0ZQogICAgICAgICAgICBoMi5tYi00KGRhdGEtYW9zPSJmbGlwLXVwIikgSW50ZWdyYWNpw7NuIGRlbCBmZWVkYmFjayBlbiBsYSBtZWpvcmEgZGVsIHByb2R1Y3RvIHkgZGVsIGVxdWlwbwogICAgICAgICAgICBwLm1iLTQoZGF0YS1hb3M9ImZhZGUtcmlnaHQiKSBFbiBlbCBQREYgSW50ZWdyYWNpw7NuIGRlbCBmZWVkYmFjayBlbiBsYSBtZWpvcmEgZGVsIHByb2R1Y3RvIHkgZGVsIGVxdWlwbywgc2UgYW5hbGl6YW4gbGFzIGZvcm1hcyBtw6FzIGVmZWN0aXZhcyBkZSBpbmNvcnBvcmFyIGVsIGZlZWRiYWNrIGRlbnRybyBkZWwgY2ljbG8gw6FnaWwsIGRlc3RhY2FuZG8gY8OzbW8gZXN0ZSBwdWVkZSBwcm92ZW5pciBkZSBtw7psdGlwbGVzIGZ1ZW50ZXMsIHkgY8OzbW8gdHJhbnNmb3JtYXJsbyBlbiBhY2Npb25lcyBjb25jcmV0YXMgcXVlIGZvcnRhbGV6Y2FuIHRhbnRvIGxhIGNhbGlkYWQgZGVsIHNvZnR3YXJlIGNvbW8gbGEgY29sYWJvcmFjacOzbiB5IGVsIGJpZW5lc3RhciBkZWwgZXF1aXBvLgoKICAgICAgICAgICAgYS5hbmV4by5tYi00LmJnLXdoaXRlLnctZml0KDpocmVmPSJvYnRlbmVyTGluaygnL2Rvd25sb2Fkcy9BbmV4b182LnBkZicpIiB0YXJnZXQ9Il9ibGFuayIpKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgICAgICAgICAuYW5leG9fX2ljb25vKDpzdHlsZT0ieydiYWNrZ3JvdW5kLWNvbG9yJzogJyNGQ0RGREInfSIpCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby1wZGYuc3ZnIikKICAgICAgICAgICAgICAuYW5leG9fX3RleHRvCiAgICAgICAgICAgICAgICBwLm1iLTAgSW50ZWdyYWNpw7NuIGRlbCBmZWVkYmFjayBlbiBsYSBtZWpvcmEgZGVsIHByb2R1Y3RvIHkgZGVsIGVxdWlwbwoKICAgIC8vIEJsb3F1ZTogcMOhcnJhZm8gc2ltcGxlCiAgICBwLm1iLTQgUGFyYSBmaW5hbGl6YXIsIGxvIGludml0YW1vcyBhIHZlciBlbCBzaWd1aWVudGUgdmlkZW8sIGVsIGN1YWwgcHJlc2VudGEgbGEgaGVycmFtaWVudGEgSmlyYSwgZW5mb2PDoW5kb2xhIGVuIHN1IHV0aWxpemFjacOzbiBlbiB1biBwcm95ZWN0byBTY3J1bS4KCiAgICAvLyBCbG9xdWU6IHZpZGVvLWZvbmRvCiAgICAuYmctZnVsbC13aWR0aC5iZy1mb25kby1zbGlkZXIubWItNQogICAgICAucC00LnAtbWQtNQogICAgICAgIGZpZ3VyZQogICAgICAgICAgLnZpZGVvCiAgICAgICAgICAgIGlmcmFtZSh3aWR0aD0iNTYwIiBoZWlnaHQ9IjMxNSIgc3JjPSJodHRwczovL3d3dy55b3V0dWJlLmNvbS9lbWJlZC9KeHJad2dfb041WT9zaT1pc0tBR1FoV0pRNmpyY2d2IiB0aXRsZT0iWW91VHViZSB2aWRlbyBwbGF5ZXIiIGZyYW1lYm9yZGVyPSIwIiBhbGxvdz0iYWNjZWxlcm9tZXRlcjsgYXV0b3BsYXk7IGNsaXBib2FyZC13cml0ZTsgZW5jcnlwdGVkLW1lZGlhOyBneXJvc2NvcGU7IHBpY3R1cmUtaW4tcGljdHVyZSIgYWxsb3dmdWxsc2NyZWVuKQoKICAgIC8vIEJsb3F1ZTogYWN0aXZpZGFkCiAgICAuYmctZnVsbC13aWR0aC5ib3JkZXItdG9wLmFjdGl2aWRhZC5iZy1jb2xvci1hY3RpdmlkYWQKICAgICAgLnAtNC5wLW1kLTUKICAgICAgICAjQWN0aXZpZGFkCiAgICAgICAgICA8QWN0aXZpZGFkIDpjdWVzdGlvbmFyaW89ImN1ZXN0aW9uYXJpbyIvPgoKICAgIC8vIEJsb3F1ZTogbWF0ZXJpYWwtY29tcGxlbWVudGFyaW8KICAgIC5iZy1mdWxsLXdpZHRoLmJvcmRlci10b3AuY29sb3ItcHJpbWFyaW8KICAgICAgLnAtNC5wLW1kLTUKICAgICAgICBoMihkYXRhLWFvcz0iZmFkZS1sZWZ0IikgTUFURVJJQUwgQ09NUExFTUVOVEFSSU8KICAgICAgICAucm93Lm1hdGVyaWFsLWNvbXBsZW1lbnRhcmlvCiAgICAgICAgICAuY29sLTEyLmNvbC1tZC02LmNvbC1sZy03CiAgICAgICAgICAgIHAgTG9zIGludml0YW1vcyBhIGV4cGxvcmFyIGVsIG1hdGVyaWFsIGNvbXBsZW1lbnRhcmlvIHF1ZSBhbXBsaWFyw6Egc3VzIGNvbm9jaW1pZW50b3Mgc29icmUgaW1wbGVtZW50YWNpw7NuIGRlIGZlZWRiYWNrIGNvbnRpbnVvLgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL2VsaWJyby5uZXQvZXMvbGMvdGVjbm9sb2dpY2FkZWxvcmllbnRlL3RpdHVsb3MvMjg1NjkiIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBDbGVyeSBBZ3VpcnJlLCBBLiBHLiAoMjAwOSkuIEFwbGljYWNpw7NuIHkgdXNvIGRlbCBzaXN0ZW1hIEthbmJhbiBwYXJhIGxvZ3JhciBsYSBlZmljaWVuY2lhIG9wZXJhdGl2YSBkZSB1bmEgZW1wcmVzYS4gRWwgQ2lkIEVkaXRvciB8IGFwdW50ZXMuCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vd3d3LnlvdXR1YmUuY29tL3dhdGNoP3Y9LWhva2kyWVBIUXciIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBFdm9sdXRpb240QWxsLiAoMjAxOSkuIEFnaWxlIFJldHJvc3BlY3RpdmVzOiBGZWVkYmFjayBEb29yIEV4ZXJjaXNlIFt2aWRlb10uWW91VHViZS4KICAgICAgICAgIC5jb2wtMTIuY29sLW1kLTYuY29sLWxnLTMub2Zmc2V0LWxnLTEKICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgaW1nKHNyYz0nQC9hc3NldHMvY29tcG9uZW50ZXMvbWF0ZXJpYWwtY29tcGxlbWVudGFyaW8uc3ZnJywgYWx0PScnKQoK"},null]}