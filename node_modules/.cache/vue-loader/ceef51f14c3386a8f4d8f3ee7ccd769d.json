{"remainingRequest":"/home/runner/work/U3_Investigacion_Innovacion_2/U3_Investigacion_Innovacion_2/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/U3_Investigacion_Innovacion_2/U3_Investigacion_Innovacion_2/src/views/curso/Tema1.vue?vue&type=template&id=697ddb70&lang=pug&","dependencies":[{"path":"/home/runner/work/U3_Investigacion_Innovacion_2/U3_Investigacion_Innovacion_2/src/views/curso/Tema1.vue","mtime":1757267972690},{"path":"/home/runner/work/U3_Investigacion_Innovacion_2/U3_Investigacion_Innovacion_2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Investigacion_Innovacion_2/U3_Investigacion_Innovacion_2/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/U3_Investigacion_Innovacion_2/U3_Investigacion_Innovacion_2/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/U3_Investigacion_Innovacion_2/U3_Investigacion_Innovacion_2/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/U3_Investigacion_Innovacion_2/U3_Investigacion_Innovacion_2/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubyg6c3ViVGl0dWxvPSInMS4gVMOpY25pY2FzIGRlIHJldHJvc3BlY2Npw7NuIGVmZWN0aXZhJyIpCiAgLmNvbnRhaW5lci50YXJqZXRhLnRhcmpldGEtLWJsYW5jYS5wLTQucC1tZC01Lm92ZXJmbG93LWhpZGRlbgoKICAgIC8vIEJsb3F1ZTogYXVkaW8taW1hZ2VuCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci0xLm1iLTUKICAgICAgLnAtNC5wLW1kLTUKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTYKICAgICAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNCBQYXJhIGNvbWVuemFyIGNvbiBlbCBlc3R1ZGlvIGRlIGVzdGEgdGVtw6F0aWNhLCBsbyBpbnZpdGFtb3MgYSBlc2N1Y2hhciBlbCBzaWd1aWVudGUgcMOzZGNhc3QuCiAgICAgICAgICAgIAogICAgICAgICAgICBUYXJqZXRhQXVkaW8uY29sb3ItYWNlbnRvLWJvdG9uZXMuYmctY29sb3Itd2hpdGUubWItMygKICAgICAgICAgICAgICB0ZXh0bz0iVMOpY25pY2FzIGRlIHJldHJvc3BlY2Npw7NuIGVmZWN0aXZhIgogICAgICAgICAgICAgIHRpZW1wbwogICAgICAgICAgICAgIDphdWRpbz0icmVxdWlyZSgnLi4vLi4vYXNzZXRzL2N1cnNvL3BvZGNhc3QvcG9kY2FzdDEubXAzJykiCiAgICAgICAgICAgICkKICAgICAgICAgIC5jb2wtbGctNgogICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8xLnN2ZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKCiAgICAvLyBCbG9xdWU6IHRpdHVsby1zZWd1bmRvCiAgICAjdF8xXzEudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMS4xXSBQcm9ww7NzaXRvIHkgdmFsb3IgZGUgbGFzIHJldHJvc3BlY3RpdmFzIGVuIFNjcnVtCgogICAgLy8gQmxvcXVlOiBpbWFnZW4tdGV4dG8taWNvbm9ibG9xdWUgNDo4CiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy00CiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8yLnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgLmNvbC1sZy04CiAgICAgICAgcChkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNCBMYXMgcmV0cm9zcGVjdGl2YXMgZW4gU2NydW0sIHJlcHJlc2VudGFuIHVuIGVsZW1lbnRvIGNlbnRyYWwgcGFyYSBsYSBjb25zb2xpZGFjacOzbiBkZSBsYSBhZ2lsaWRhZCBlbiBlcXVpcG9zIGRlIHRyYWJham8uIFNvbiByZXVuaW9uZXMgcGVyacOzZGljYXMgZW4gbGFzIHF1ZSBsb3MgbWllbWJyb3MgZGVsIGVxdWlwbyBleGFtaW5hbiwgZGUgbWFuZXJhIHNpc3RlbcOhdGljYSwgc3UgZGVzZW1wZcOxbyBkdXJhbnRlIGVsIFNwcmludCBxdWUgYWNhYmEgZGUgY29uY2x1aXIsIHBhcmEgZGV0ZWN0YXIgw6FyZWFzIGRlIG1lam9yYSB5IHJlZm9yemFyIGxhcyBidWVuYXMgcHLDoWN0aWNhcy4gRXN0ZSBlamVyY2ljaW8gZGUgYXV0b2V2YWx1YWNpw7NuIGVzIGNsYXZlIHBhcmEgcXVlIGxvcyBlcXVpcG9zIG5vIHNvbG8gbWVqb3JlbiBzdSBwcm9kdWN0aXZpZGFkLCBzaW5vIHRhbWJpw6luIHN1IGNvaGVzacOzbiB5IG1vdGl2YWNpw7NuLgoKICAgICAgICAuYmctY29sb3ItMi5wLTQoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTQKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtc3RhcnQKICAgICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMy5zdmciLCBzdHlsZT0ibWF4LXdpZHRoOiA5MHB4IikubXgtYXV0bwogICAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgICAgcC5tYi0wIERlc2RlIHVuYSBwZXJzcGVjdGl2YSBmaWxvc8OzZmljYSwgbGFzIHJldHJvc3BlY3RpdmFzIGVuIFNjcnVtIHNlIGZ1bmRhbWVudGFuIGVuIGVsIGNvbmNlcHRvIGRlIGFwcmVuZGl6YWplIG9yZ2FuaXphY2lvbmFsIHkgbGEgbWVqb3JhIGNvbnRpbnVhLCBxdWUgYnVzY2EgcXVlIGNhZGEgaXRlcmFjacOzbiBvIGNpY2xvIGRlIHRyYWJham8sIHNlYSB1bmEgb3BvcnR1bmlkYWQgcGFyYSBhdmFuemFyIHkgcGVyZmVjY2lvbmFyLCB0YW50byBlbCBwcm9kdWN0byBjb21vIGxvcyBwcm9jZXNvcyBxdWUgbG8gZ2VuZXJhbi4gRXN0YSBwcsOhY3RpY2EgZXN0w6EgZW4gY29uc29uYW5jaWEgY29uIGVsIG1hbmlmaWVzdG8gw6FnaWwsIHF1ZSBlbmZhdGl6YSBsYSBpbXBvcnRhbmNpYSBkZSBsYSByZWZsZXhpw7NuIHJlZ3VsYXIgc29icmUgY8OzbW8gc2VyIG3DoXMgZWZlY3Rpdm9zIHkgYWp1c3RhciBlbCBjb21wb3J0YW1pZW50byBlbiBjb25zZWN1ZW5jaWEuCgogICAgLy8gQmxvcXVlOiBww6FycmFmbyBzaW1wbGUKICAgIGgyLm1iLTQgUHJvcMOzc2l0byBmdW5kYW1lbnRhbCBkZSBsYXMgcmV0cm9zcGVjdGl2YXMgZW4gU2NydW0KCiAgICAvLyBCbG9xdWU6IGNvbG9yLXRleHRvLWltYWdlbgogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtbGctOAogICAgICAgIC5iZy1jb2xvci0xLnB4LTQucHktNShkYXRhLWFvcz0iZmFkZS1sZWZ0IikubWItNAogICAgICAgICAgcC5tYi0wIEVsIHByb3DDs3NpdG8gcHJpbmNpcGFsIGRlIGxhcyByZXRyb3NwZWN0aXZhcywgZXMgZ2VuZXJhciB1biBlc3BhY2lvIGRlIHJlZmxleGnDs24geSBkacOhbG9nbyBhYmllcnRvIHkgc2VndXJvIGRvbmRlIGVsIGVxdWlwbyBwdWVkYSBhbmFsaXphciBsbyBxdWUgZnVuY2lvbsOzIGJpZW4sIGxvIHF1ZSBubyBmdW5jaW9uw7MgeSBjw7NtbyBzZSBwdWVkZSBtZWpvcmFyIGVuIGVsIHByw7N4aW1vIFNwcmludC4gU2UgdHJhdGEgZGUgdW4gZWplcmNpY2lvIGRlIHRyYW5zcGFyZW5jaWEgeSBob25lc3RpZGFkIHF1ZSBmb21lbnRhIGxhIHJlc3BvbnNhYmlsaWRhZCBjb21wYXJ0aWRhLCBlcyBkZWNpciwgcXVlIHRvZG9zIGxvcyBtaWVtYnJvcyBkZWwgZXF1aXBvIHJlY29ub2NlbiBzdSBwYXBlbCBlbiBlbCDDqXhpdG8gbyBsYXMgZGlmaWN1bHRhZGVzIHkgc2UgY29tcHJvbWV0ZW4gZW4gYWNjaW9uZXMgY29uY3JldGFzIHBhcmEgYXZhbnphci4KICAgICAgICAKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBFbiBlc3RlIHNlbnRpZG8sIGxhIHJldHJvc3BlY3RpdmEgZXMgdW5hIGhlcnJhbWllbnRhIHBhcmE6CiAgICAgIC5jb2wtbGctNC5kLW5vbmUuZC1zbS1ibG9jawogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvNC5wbmciLCBkYXRhLWFvcz0iem9vbS1pbiIpLm1iLTQubWItbGctMAoKICAgIC8vIEJsb3F1ZTogc2x5ZGVyLTQKICAgIC5iZy1mdWxsLXdpZHRoLmJnLWZvbmRvLXNsaWRlci5tYi01CiAgICAgIC5wLTQucC1tZC01CiAgICAgICAgU2x5ZGVyQSh0aXBvPSJiIikuYmctd2hpdGUKICAgICAgICAgIC5yb3cuYWxpZ24taXRlbXMtY2VudGVyLnAtNC5wLW1kLTUKICAgICAgICAgICAgLmNvbC1sZy01Lm9yZGVyLWxnLTIKICAgICAgICAgICAgICBmaWd1cmUKICAgICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzUucG5nIikKICAgICAgICAgICAgLmNvbC1sZy03Lm9yZGVyLWxnLTEKICAgICAgICAgICAgICBoNSBEaWFnbm9zdGljYXIgZWwgZXN0YWRvIGFjdHVhbCBkZWwgZXF1aXBvIHkgbG9zIHByb2Nlc29zCiAgICAgICAgICAgICAgcCBlbCBlcXVpcG8gcmV2aXNhIHF1w6kgYWN0aXZpZGFkZXMgbyBkaW7DoW1pY2FzIGZ1ZXJvbiBlZmVjdGl2YXMgeSBjdcOhbGVzIG5vLiBQb3IgZWplbXBsbywgcHVlZGUgZGV0ZWN0YXIgcXVlIGxhcyByZXVuaW9uZXMgZGlhcmlhcyAoZGFpbHkgc3RhbmQtdXBzKSBzZSBleHRlbmRpZXJvbiBkZW1hc2lhZG8geSBwZXJkaWVyb24gZm9jbywgYWZlY3RhbmRvIGxhIGNvb3JkaW5hY2nDs24uCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNS5vcmRlci1sZy0yCiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS82LnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNy5vcmRlci1sZy0xCiAgICAgICAgICAgICAgaDUgSWRlbnRpZmljYXIgb2JzdMOhY3Vsb3MgbyBpbXBlZGltZW50b3MgcXVlIHJldHJhc2FuIGVsIGF2YW5jZQogICAgICAgICAgICAgIHAgZWwgZXF1aXBvLCBwdWVkZSBkZXRlY3RhciBwcm9ibGVtYXMgY29tbyBkZW1vcmFzIGVuIGxhIGVudHJlZ2EgZGUgaW5mb3JtYWNpw7NuLCBmYWx0YSBkZSByZWN1cnNvcyBvIGRpZmljdWx0YWRlcyB0w6ljbmljYXMgcXVlIG5vIGZ1ZXJvbiBhYm9yZGFkYXMgYSB0aWVtcG8uCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNS5vcmRlci1sZy0yCiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS83LnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNy5vcmRlci1sZy0xCiAgICAgICAgICAgICAgaDUgRGlzZcOxYXIgeSBhY29yZGFyIG1lam9yYXMgY29uY3JldGFzIHBhcmEgaW1wbGVtZW50YXIgZW4gZWwgc2lndWllbnRlIFNwcmludAogICAgICAgICAgICAgIHAgbGEgcmV0cm9zcGVjdGl2YSwgZGViZSBmaW5hbGl6YXIgY29uIHVuIHBsYW4gZGUgYWNjacOzbiBjbGFybyBxdWUgcGVybWl0YSBxdWUgZWwgZXF1aXBvIGV2b2x1Y2lvbmUgeSBldml0ZSByZXBldGlyIGVycm9yZXMuCiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlci5wLTQucC1tZC01CiAgICAgICAgICAgIC5jb2wtbGctNS5vcmRlci1sZy0yCiAgICAgICAgICAgICAgZmlndXJlCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS84LnBuZyIpCiAgICAgICAgICAgIC5jb2wtbGctNy5vcmRlci1sZy0xCiAgICAgICAgICAgICAgaDUgRm9ydGFsZWNlciBsYSBjb211bmljYWNpw7NuIHkgZWwgdHJhYmFqbyBlbiBlcXVpcG8KICAgICAgICAgICAgICBwIGFsIHBlcm1pdGlyIHF1ZSBjYWRhIG1pZW1icm8gZXhwcmVzZSBzdXMgb3BpbmlvbmVzIHkgc2VudGltaWVudG9zLCBzZSByZWZ1ZXJ6YW4gbGEgY29uZmlhbnphIHkgZWwgc2VudGlkbyBkZSBwZXJ0ZW5lbmNpYS4KCiAgICAvLyBCbG9xdWU6IHRleHRvLWNvbG9yLWltYWdlbgogICAgLnJvdy5tYi01CiAgICAgIC5jb2wtbGctOAogICAgICAgIHAoZGF0YS1hb3M9ImZhZGUtbGVmdCIpLm1iLTQgVW4gZXF1aXBvIFNjcnVtIGRlIGRlc2Fycm9sbG8gZGUgc29mdHdhcmUgcXVlIHRyYWJhamEgZW4gdW5hIGFwbGljYWNpw7NuIHdlYiwgcmVhbGl6YSB1bmEgcmV0cm9zcGVjdGl2YSBhbCBmaW5hbGl6YXIgc3UgU3ByaW50IGRlIGRvcyBzZW1hbmFzLiBEdXJhbnRlIGxhIHNlc2nDs24sIGxvcyBtaWVtYnJvcyBjb21lbnRhbiBxdWUgZWwgZXF1aXBvIGRlIGRpc2XDsW8gZW50cmVnw7MgbG9zIHdpcmVmcmFtZXMgY29uIHJldHJhc28sIGxvIHF1ZSBhZmVjdMOzIGxhIGltcGxlbWVudGFjacOzbiBwb3IgcGFydGUgZGUgbG9zIGRlc2Fycm9sbGFkb3Jlcy4gQWRlbcOhcywgZGVzdGFjYW4gcXVlIGxhIGNhbGlkYWQgZGVsIGPDs2RpZ28gZnVlIGJ1ZW5hIHkgcXVlIGVsIHVzbyBkZSBpbnRlZ3JhY2nDs24gY29udGludWEsIGZhY2lsaXTDsyBsYXMgcHJ1ZWJhcy4KCiAgICAgICAgLmJnLWNvbG9yLTQucC00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgcC5tYi0wIENvbW8gcmVzdWx0YWRvLCBhY3VlcmRhbiBpbXBsZW1lbnRhciB1bmEgY29tdW5pY2FjacOzbiBtw6FzIGNlcmNhbmEgZW50cmUgZGlzZcOxYWRvcmVzIHkgZGVzYXJyb2xsYWRvcmVzLCBjb24gcmV1bmlvbmVzIGNvbmp1bnRhcyBzZW1hbmFsZXMsIHkgYXNpZ25hciB0aWVtcG8gcGFyYSByZXZpc2lvbmVzIHRlbXByYW5hcyBkZSBkaXNlw7FvLCBhbnRlcyBkZWwgU3ByaW50LiBFc3RlIGVqZW1wbG8gaWx1c3RyYSBjw7NtbyBsYSByZXRyb3NwZWN0aXZhIGF5dWRhIGEgcmVzb2x2ZXIgcHJvYmxlbWFzIG9wZXJhdGl2b3MgeSBtZWpvcmEgbGEgY29sYWJvcmFjacOzbi4KICAgICAgLmNvbC1sZy00CiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS85LnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKCiAgICAvLyBCbG9xdWU6IHDDoXJyYWZvIHNpbXBsZQogICAgaDIubWItNCBWYWxvciBxdWUgYXBvcnRhbiBsYXMgcmV0cm9zcGVjdGl2YXMgYSBlcXVpcG9zIHkgb3JnYW5pemFjaW9uZXMKICAgIHAubWItNCBMYXMgcmV0cm9zcGVjdGl2YXMgdGllbmVuIHVuIHZhbG9yIHF1ZSB0cmFzY2llbmRlIGVsIGNvcnRvIHBsYXpvLiBTZSB0cmF0YSBkZSB1bmEgcHLDoWN0aWNhIHF1ZSwgc2kgc2UgYWRvcHRhIGNvcnJlY3RhbWVudGUsIHB1ZWRlIHRyYW5zZm9ybWFyIGxhIGN1bHR1cmEgb3JnYW5pemFjaW9uYWwgeSBsYSBmb3JtYSBlbiBxdWUgbG9zIGVxdWlwb3MgYWJvcmRhbiBlbCB0cmFiYWpvLiBFbCB2YWxvciBmdW5kYW1lbnRhbCByYWRpY2EgZW4gcXVlIGNvbnZpZXJ0ZW4gbGEgZXhwZXJpZW5jaWEgZW4gY29ub2NpbWllbnRvIHkgYWNjacOzbi4KCiAgICAvLyBCbG9xdWU6IGltZy1hY29yZGVvbgogICAgLnJvdy5hbGlnbi1pdGVtcy1zdGFydC5tYi01CiAgICAgIC5jb2wtbGctNAogICAgICAgIGZpZ3VyZQogICAgICAgICAgaW1nKHNyYz0iQC9hc3NldHMvY3Vyc28vdGVtYTEvMTAucG5nIiwgYWx0PSIiKS5tYi00Lm1iLWxnLTAKICAgICAgLmNvbC1sZy04CiAgICAgICAgQWNvcmRpb25BKHRpcG89ImIiKQogICAgICAgICAgLmRpdih0aXR1bG89Ik1lam9yYSBjb250aW51YSIpCiAgICAgICAgICAgIHAgTGEgbmF0dXJhbGV6YSBpdGVyYXRpdmEgZGUgU2NydW0gcGVybWl0ZSBpbmNvcnBvcmFyIGFwcmVuZGl6YWplcyB5IGFqdXN0ZXMgZGVzcHXDqXMgZGUgY2FkYSBTcHJpbnQuIEVzdGUgY2ljbG8gZGUgbWVqb3JhIGNvbnRpbnVhLCBwb3RlbmNpYWRvIHBvciBsYXMgcmV0cm9zcGVjdGl2YXMsIGhhY2UgcXVlIGxvcyBlcXVpcG9zIHNlYW4gY2FkYSB2ZXogbcOhcyBlZmljaWVudGVzIHkgcmVzaWxpZW50ZXMsIGFudGUgY2FtYmlvcyBvIGRpZmljdWx0YWRlcy4gTGEgbWVqb3JhIG5vIGVzIHVuIGV2ZW50byBhaXNsYWRvLCBzaW5vIHVuYSBwcsOhY3RpY2EgaW50ZWdyYWRhIGVuIGVsIGTDrWEgYSBkw61hLgogICAgICAgICAgICBwICNbc3Ryb25nIEVqZW1wbG8uXSBVbiBlcXVpcG8gcXVlLCBlbiB1bmEgcmV0cm9zcGVjdGl2YSwgaWRlbnRpZmljYSBxdWUgbGEgcGxhbmlmaWNhY2nDs24gaW5pY2lhbCBkZWwgU3ByaW50IGZ1ZSBtdXkgb3B0aW1pc3RhLCBwdWVkZSBhanVzdGFyIHN1cyBlc3RpbWFjaW9uZXMgZW4gU3ByaW50cyBwb3N0ZXJpb3JlcywgbG9ncmFuZG8gZW50cmVnYXMgbcOhcyByZWFsaXN0YXMgeSBzaW4gZ2VuZXJhciBlc3Ryw6lzIGlubmVjZXNhcmlvLgoKICAgICAgICAgIC5kaXYodGl0dWxvPSJJbmNyZW1lbnRvIGRlIGxhIHByb2R1Y3RpdmlkYWQgeSBjYWxpZGFkIikKICAgICAgICAgICAgcCBMYSBjYXBhY2lkYWQgZGUgZGV0ZWN0YXIgeSBjb3JyZWdpciBpbXBlZGltZW50b3MgcGVybWl0ZSBxdWUgZWwgZXF1aXBvIGF2YW5jZSBjb24gbWF5b3IgZmx1aWRleiB5IGVudHJlZ3VlIHByb2R1Y3RvcyBjb24gbWVqb3IgY2FsaWRhZC4gRXN0byBzZSB0cmFkdWNlIGVuIG1heW9yIHNhdGlzZmFjY2nDs24gZGVsIGNsaWVudGUgeSBlbiBlcXVpcG9zIG3DoXMgbW90aXZhZG9zLgoKICAgICAgICAgIC5kaXYodGl0dWxvPSJGb21lbnRvIGRlIGxhIHRyYW5zcGFyZW5jaWEgeSBjb25maWFuemEiKQogICAgICAgICAgICBwIExhIHJldHJvc3BlY2Npw7NuIHJlcXVpZXJlIGFwZXJ0dXJhIHkgaG9uZXN0aWRhZCwgbG8gY3VhbCBmb3J0YWxlY2UgbGEgY29uZmlhbnphIGVudHJlIGxvcyBtaWVtYnJvcyBkZWwgZXF1aXBvLiBDdWFuZG8gbG9zIGNvbGFib3JhZG9yZXMgc2llbnRlbiBxdWUgcHVlZGVuIGV4cHJlc2FyIHN1cyBvcGluaW9uZXMgc2luIG1pZWRvIGEgcmVwcmVzYWxpYXMsIHNlIGNyZWEgdW4gYW1iaWVudGUgcHJvcGljaW8gcGFyYSBsYSBpbm5vdmFjacOzbiB5IGxhIGNvbGFib3JhY2nDs24uCiAgICAgICAgICAgIHAgI1tzdHJvbmcgRWplbXBsby5dIFVuIG1pZW1icm8gZGVsIGVxdWlwbyBxdWUgbm90YSBxdWUgY2llcnRhIHByw6FjdGljYSBlc3TDoSBnZW5lcmFuZG8gcmV0cmFiYWpvLCBwdWVkZSBwbGFudGVhcmxvIGR1cmFudGUgbGEgcmV0cm9zcGVjdGl2YSB5LCBjb24gZWwgYXBveW8gZGVsIGVxdWlwbywgcHJvcG9uZXIgdW5hIGFsdGVybmF0aXZhIHBhcmEgcmVkdWNpciBlcnJvcmVzLgoKICAgICAgICAgIC5kaXYodGl0dWxvPSJBZGFwdGFjacOzbiB5IHJlc3B1ZXN0YSByw6FwaWRhIGFsIGNhbWJpbyIpCiAgICAgICAgICAgIHAgTGEgcmV0cm9zcGVjdGl2YSBoYWNlIHF1ZSBsb3MgZXF1aXBvcyBubyBwZXJtYW5lY2VuIGVzdMOhdGljb3MsIHNpbm8gcXVlIHNlIGFqdXN0ZW4gZGUgbWFuZXJhIMOhZ2lsIGEgbnVldmFzIGNpcmN1bnN0YW5jaWFzLCByZXF1aXNpdG9zIG8gdGVjbm9sb2fDrWFzLiBFc3RhIGNhcGFjaWRhZCBhZGFwdGF0aXZhIGVzIGVzZW5jaWFsIGVuIGVudG9ybm9zIGRlIGFsdGEgaW5jZXJ0aWR1bWJyZS4KCiAgICAvLyBCbG9xdWU6IHDDoXJyYWZvIHNpbXBsZQogICAgaDIubWItNCBNw6FzIGVqZW1wbG9zIHF1ZSBldmlkZW5jaWFuIGVsIHZhbG9yIGRlIGxhcyByZXRyb3NwZWN0aXZhcwoKICAgIC8vIEJsb3F1ZTogY29sb3ItaW1hZ2VuCiAgICAucm93Lm1iLTUKICAgICAgLmNvbC1sZy04CiAgICAgICAgLmJnLWNvbG9yLTYucC00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKQogICAgICAgICAgdWwubGlzdGEtdWwtLWNvbG9yLmNvbG9yLWRhcmsKICAgICAgICAgICAgbGkubWItMwogICAgICAgICAgICAgIGkuZmFzLmZhLWFycm93LWNpcmNsZS1yaWdodAogICAgICAgICAgICAgIHwgRW4gdW4gZXF1aXBvIGRlIGRlc2Fycm9sbG8gZGUgcHJvZHVjdG9zLCB0cmFzIHZhcmlhcyByZXRyb3NwZWN0aXZhcywgc2UgaWRlbnRpZmljw7MgcXVlIGxhIGZhbHRhIGRlIGRlZmluaWNpw7NuIGNsYXJhIGRlIGhpc3RvcmlhcyBkZSB1c3VhcmlvLCBnZW5lcmFiYSByZXRyYWJham8gY29uc3RhbnRlLiBJbXBsZW1lbnRhcm9uIHNlc2lvbmVzIGRlIHJlZmluYW1pZW50byBtw6FzIHJpZ3Vyb3NhcywgYW50ZXMgZGUgbGEgcGxhbmlmaWNhY2nDs24sIGxvIHF1ZSByZWR1am8gZWwgcmV0cmFiYWpvIHkgYXVtZW50w7MgbGEgdmVsb2NpZGFkIGRlbCBlcXVpcG8uCiAgICAgICAgICAgIGxpLm1iLTAKICAgICAgICAgICAgICBpLmZhcy5mYS1hcnJvdy1jaXJjbGUtcmlnaHQKICAgICAgICAgICAgICB8IEVuIG90cm8gY2FzbywgdW4gZXF1aXBvIGRldGVjdMOzIHF1ZSBsb3MgdGVzdGVycyBzZSBpbnZvbHVjcmFyb24gbXV5IHRhcmRlIGVuIGVsIHByb2Nlc28sIGxvIHF1ZSBnZW5lcmEgY3VlbGxvcyBkZSBib3RlbGxhLiBEZWNpZGllcm9uIGludGVncmFyIGEgbG9zIHRlc3RlcnMgZGVzZGUgbGEgcGxhbmlmaWNhY2nDs24sIGxvIHF1ZSBwZXJtaXRpw7MgZGV0ZWN0YXIgZXJyb3JlcyB0ZW1wcmFuYW1lbnRlIHkgbWVqb3JhciBsYSBjYWxpZGFkLgogICAgICAuY29sLWxnLTQKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzExLnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKCiAgICAvLyBCbG9xdWU6IHRpdHVsby1zZWd1bmRvCiAgICAjdF8xXzIudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMS4yXSBFc3RydWN0dXJhIGLDoXNpY2EgZGUgdW5hIHNlc2nDs24gZGUgcmV0cm9zcGVjdGl2YQoKICAgIHAubWItNCBMYSBzZXNpw7NuIGRlIHJldHJvc3BlY3RpdmEgZXMgdW5hIHByw6FjdGljYSBmdW5kYW1lbnRhbCBlbiBsb3MgZXF1aXBvcyBxdWUgdHJhYmFqYW4gYmFqbyBtYXJjb3Mgw6FnaWxlcywgeWEgcXVlIHBlcm1pdGUgcmV2aXNhciBlbCBwcm9jZXNvLCBpZGVudGlmaWNhciBvcG9ydHVuaWRhZGVzIGRlIG1lam9yYSB5IGZvcnRhbGVjZXIgbGEgY29sYWJvcmFjacOzbi4KCiAgICAvLyBCbG9xdWU6IGltZy1hbmV4bwogICAgLmJnLWZ1bGwtd2lkdGguYmctY29sb3ItNS5tYi1sZy01CiAgICAgIC5weC00LnAtbWQtNQogICAgICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIKICAgICAgICAgIC5jb2wtbGctNAogICAgICAgICAgICBmaWd1cmUoZGF0YS1hb3M9Inpvb20taW4iKQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWExLzEyLnBuZycsIGFsdD0nJykKCiAgICAgICAgICAuY29sLWxnLTgudGV4dC13aGl0ZQogICAgICAgICAgICBoMi5tYi00KGRhdGEtYW9zPSJmbGlwLXVwIikgRXN0cnVjdHVyYSBiw6FzaWNhIGRlIHVuYSBzZXNpw7NuIGRlIHJldHJvc3BlY3RpdmEKICAgICAgICAgICAgcC5tYi00KGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikgRW4gZWwgUERGIEVzdHJ1Y3R1cmEgYsOhc2ljYSBkZSB1bmEgc2VzacOzbiBkZSByZXRyb3NwZWN0aXZhLCBzZSBwcmVzZW50YSB1bmEgZ3XDrWEgZGV0YWxsYWRhIHBhcmEgbGxldmFyIGEgY2FibyBlc3RhIGNlcmVtb25pYSwgaW5jbHV5ZW5kbyBmYXNlcywgYWN0aXZpZGFkZXMgeSBlamVtcGxvcyBxdWUgZmFjaWxpdGFuIHN1IGltcGxlbWVudGFjacOzbi4gRXN0ZSByZWN1cnNvIHBlcm1pdGUgYSBsb3MgZXF1aXBvcyBhZG9wdGFyIHVuYSBkaW7DoW1pY2Egb3JnYW5pemFkYSwgcGFydGljaXBhdGl2YSB5IGVuZm9jYWRhIGVuIGVsIGFwcmVuZGl6YWplIGNvbnRpbnVvLgoKICAgICAgICAgICAgYS5hbmV4by5tYi00LmJnLXdoaXRlLnctZml0KDpocmVmPSJvYnRlbmVyTGluaygnL2Rvd25sb2Fkcy9BbmV4b18xLnBkZicpIiB0YXJnZXQ9Il9ibGFuayIpKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgICAgICAgICAuYW5leG9fX2ljb25vKDpzdHlsZT0ieydiYWNrZ3JvdW5kLWNvbG9yJzogJyNGQ0RGREInfSIpCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby1wZGYuc3ZnIikKICAgICAgICAgICAgICAuYW5leG9fX3RleHRvCiAgICAgICAgICAgICAgICBwLm1iLTAgRXN0cnVjdHVyYSBiw6FzaWNhIGRlIHVuYSBzZXNpw7NuIGRlIHJldHJvc3BlY3RpdmEKCiAgICAvLyBCbG9xdWU6IHRpdHVsby1zZWd1bmRvCiAgICAjdF8xXzMudGl0dWxvLXNlZ3VuZG8oZGF0YS1hb3M9ImZsaXAtdXAiKQogICAgICBoMiAjW3NwYW4gMS4zXSBUw6ljbmljYXMgZGluw6FtaWNhcyBwYXJhIHJldHJvc3BlY3RpdmFzCgogICAgcC5tYi00IExhcyB0w6ljbmljYXMgZGluw6FtaWNhcyBzb24gY2xhdmVzIHBhcmEgZW5yaXF1ZWNlciBsYXMgcmV0cm9zcGVjdGl2YXMgw6FnaWxlcywgeWEgcXVlIHBlcm1pdGVuIGVzdHJ1Y3R1cmFyIGxhIHJlZmxleGnDs24sIGZvbWVudGFyIGxhIHBhcnRpY2lwYWNpw7NuIHkgZ2VuZXJhciBhcHJlbmRpemFqZXMgc2lnbmlmaWNhdGl2b3MuCgogICAgLy8gQmxvcXVlOiBpbWctYW5leG8KICAgIC5iZy1mdWxsLXdpZHRoLmJnLWNvbG9yLTUubWItbGctNQogICAgICAucHgtNC5wLW1kLTUKICAgICAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyCiAgICAgICAgICAuY29sLWxnLTQKICAgICAgICAgICAgZmlndXJlKGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hMS8xMy5wbmcnLCBhbHQ9JycpCgogICAgICAgICAgLmNvbC1sZy04LnRleHQtd2hpdGUKICAgICAgICAgICAgaDIubWItNChkYXRhLWFvcz0iZmxpcC11cCIpIFTDqWNuaWNhcyBkaW7DoW1pY2FzIHBhcmEgcmV0cm9zcGVjdGl2YXMKICAgICAgICAgICAgcC5tYi00KGRhdGEtYW9zPSJmYWRlLXJpZ2h0IikgRW4gZWwgUERGIFTDqWNuaWNhcyBkaW7DoW1pY2FzIHBhcmEgcmV0cm9zcGVjdGl2YXMsIHNlIHByZXNlbnRhbiB0cmVzIGVuZm9xdWVzIGFtcGxpYW1lbnRlIHV0aWxpemFkb3MsIHF1ZSBheXVkYW4gYSBsb3MgZXF1aXBvcyBTY3J1bSBhIGlkZW50aWZpY2FyIGFjY2lvbmVzIGRlIG1lam9yYSwgZXhwcmVzYXIgZW1vY2lvbmVzIHkgY29uc3RydWlyIGNvbnNlbnNvcy4gRXN0ZSByZWN1cnNvIG9mcmVjZSBoZXJyYW1pZW50YXMgcHLDoWN0aWNhcyBwYXJhIGZhY2lsaXRhciBzZXNpb25lcyBtw6FzIGVmZWN0aXZhcywgZW1ww6F0aWNhcyB5IG9yaWVudGFkYXMgYSByZXN1bHRhZG9zLgoKICAgICAgICAgICAgYS5hbmV4by5tYi00LmJnLXdoaXRlLnctZml0KDpocmVmPSJvYnRlbmVyTGluaygnL2Rvd25sb2Fkcy9BbmV4b18yLnBkZicpIiB0YXJnZXQ9Il9ibGFuayIpKGRhdGEtYW9zPSJmbGlwLXVwIikKICAgICAgICAgICAgICAuYW5leG9fX2ljb25vKDpzdHlsZT0ieydiYWNrZ3JvdW5kLWNvbG9yJzogJyNGQ0RGREInfSIpCiAgICAgICAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy90ZW1wbGF0ZS9pY29uby1wZGYuc3ZnIikKICAgICAgICAgICAgICAuYW5leG9fX3RleHRvCiAgICAgICAgICAgICAgICBwLm1iLTAgVMOpY25pY2FzIGRpbsOhbWljYXMgcGFyYSByZXRyb3NwZWN0aXZhcwoKICAgIC8vIEJsb3F1ZTogdGl0dWxvLXNlZ3VuZG8KICAgICN0XzFfNC50aXR1bG8tc2VndW5kbyhkYXRhLWFvcz0iZmxpcC11cCIpCiAgICAgIGgyICNbc3BhbiAxLjRdIEJ1ZW5hcyBwcsOhY3RpY2FzIHBhcmEgZmFjaWxpdGFyIHJldHJvc3BlY3RpdmFzIGVmaWNhY2VzCgogICAgLy8gQmxvcXVlOiBpbWFnZW4taWNvbm9ibG9xdWUtdGV4dG8KICAgIC5yb3cubWItNQogICAgICAuY29sLWxnLTQKICAgICAgICBmaWd1cmUKICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzE0LnBuZyIsIGRhdGEtYW9zPSJ6b29tLWluIikKICAgICAgLmNvbC1sZy04CiAgICAgICAgLmJnLWNvbG9yLTEucC00KGRhdGEtYW9zPSJmYWRlLWxlZnQiKS5tYi00CiAgICAgICAgICAucm93LmFsaWduLWl0ZW1zLXN0YXJ0CiAgICAgICAgICAgIC5jb2wtbGctYXV0bwogICAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzE1LnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAgIC5jb2wtbGcKICAgICAgICAgICAgICBwLm1iLTAgTGEgcmV0cm9zcGVjdGl2YSBlcyB1bmEgY2VyZW1vbmlhIGNsYXZlIGRlbnRybyBkZWwgbWFyY28gU2NydW0gcXVlIGJ1c2NhIGVsIG1lam9yYW1pZW50byBjb250aW51byBkZWwgZXF1aXBvIHkgZGVsIHByb2Nlc28gZGUgdHJhYmFqby4gUGFyYSBxdWUgZXN0YSBzZXNpw7NuIHNlYSB2ZXJkYWRlcmFtZW50ZSBlZmVjdGl2YSB5IGN1bXBsYSBjb24gc3UgcHJvcMOzc2l0bywgZXMgaW5kaXNwZW5zYWJsZSBxdWUgZWwgZmFjaWxpdGFkb3IsIHVzdWFsbWVudGUgZWwgU2NydW0gTWFzdGVyLCBhcGxpcXVlIGJ1ZW5hcyBwcsOhY3RpY2FzIHF1ZSBwcm9tdWV2YW4gbGEgcGFydGljaXBhY2nDs24gYWN0aXZhLCBlbCBhbWJpZW50ZSBkZSBjb25maWFuemEgeSBsYSBnZW5lcmFjacOzbiBkZSByZXN1bHRhZG9zIGNvbmNyZXRvcy4KICAgICAgICAKICAgICAgICBwKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBFbiBlc3RlIHRlbWEgc2UgYW5hbGl6YXLDoW4gbGFzIGJ1ZW5hcyBwcsOhY3RpY2FzIGVzZW5jaWFsZXMgcGFyYSBmYWNpbGl0YXIgcmV0cm9zcGVjdGl2YXMgZWZpY2FjZXMsIGV4cGxpY2FuZG8gc3UgaW1wb3J0YW5jaWEsIGRldGFsbGFuZG8gY8OzbW8gYXBsaWNhcmxhcyB5IGVqZW1wbGlmaWNhbmRvIHNpdHVhY2lvbmVzIHJlYWxlcyBkb25kZSBzdSBjb3JyZWN0YSBlamVjdWNpw7NuIGhhIG1hcmNhZG8gbGEgZGlmZXJlbmNpYS4KCiAgICAvLyBCbG9xdWU6IGFjb3JkZW9uLWltZwogICAgLnJvdy5hbGlnbi1pdGVtcy1zdGFydC5tYi01CiAgICAgIC5jb2wtbGctOAogICAgICAgIEFjb3JkaW9uQSh0aXBvPSJiIikKICAgICAgICAgIC5kaXYodGl0dWxvPSJQcmVwYXJhY2nDs24gY3VpZGFkb3NhIHkgYWdlbmRhIGNsYXJhIikKICAgICAgICAgICAgcCBVbmEgcmV0cm9zcGVjdGl2YSBleGl0b3NhIGNvbWllbnphIG11Y2hvIGFudGVzIGRlIHF1ZSBzZSByZcO6bmEgZWwgZXF1aXBvLiBFbCBmYWNpbGl0YWRvciBkZWJlIHByZXBhcmFyIGNvbiBhbnRpY2lwYWNpw7NuIGxhIHNlc2nDs24sIGRlZmluaWVuZG8gbG9zIG9iamV0aXZvcyBlc3BlY8OtZmljb3MgeSBkaXNlw7FhbmRvIHVuYSBhZ2VuZGEgY2xhcmEgeSBlc3RydWN0dXJhZGEuCiAgICAgICAgICAgIHAgUG9yIGVqZW1wbG8sIHB1ZWRlIHBsYW5pZmljYXIgbGEgZHVyYWNpw7NuIGRlIGNhZGEgYWN0aXZpZGFkLCBsYSB0w6ljbmljYSBhIHV0aWxpemFyIChjb21vIFN0YXJ0LVN0b3AtQ29udGludWUgbyA0THMpLCB5IGxvcyB0aWVtcG9zIHBhcmEgY29tcGFydGlyIHkgZGlzY3V0aXIuIENvbnRhciBjb24gdW5hIGFnZW5kYSBheXVkYSBhIG1hbnRlbmVyIGVsIGVuZm9xdWUgeSBlbCByaXRtbyBkdXJhbnRlIGxhIHNlc2nDs24sIGV2aXRhbmRvIGRlc3ZpYWNpb25lcyBvIHNhdHVyYWNpw7NuLgogICAgICAgICAgICBwICNbc3Ryb25nIEVqZW1wbG8uXSBFbiB1biBlcXVpcG8gY29uIGRpZmljdWx0YWRlcyBwYXJhIGZpbmFsaXphciBsYXMgcmV0cm9zcGVjdGl2YXMgYSB0aWVtcG8sIGVsIFNjcnVtIE1hc3RlciBpbXBsZW1lbnTDsyB1bmEgYWdlbmRhIHZpc3VhbCBjb24gdGVtcG9yaXphZG9yZXMgcGFyYSBjYWRhIHNlY2Npw7NuLCBsbyBxdWUgYXVtZW50w7MgbGEgcHVudHVhbGlkYWQgeSBwZXJtaXRpw7MgdW4gY2llcnJlIGVmZWN0aXZvLgoKICAgICAgICAgIC5kaXYodGl0dWxvPSJGb21lbnRhciB1biBhbWJpZW50ZSBkZSBjb25maWFuemEgeSByZXNwZXRvIikKICAgICAgICAgICAgcCBMYSBwYXJ0aWNpcGFjacOzbiBzaW5jZXJhIHNvbG8gZXMgcG9zaWJsZSBzaSBlbCBlcXVpcG8gc2Ugc2llbnRlIGVuIHVuIGVzcGFjaW8gc2VndXJvIGRvbmRlIHB1ZWRlIGV4cHJlc2FyIG9waW5pb25lcywgZW1vY2lvbmVzIHkgY3LDrXRpY2FzIHNpbiB0ZW1vciBhIHJlcHJlc2FsaWFzLiBQb3IgZWxsbywgZWwgZmFjaWxpdGFkb3IgZGViZSBwcm9tb3ZlciB1biBjbGltYSBkZSByZXNwZXRvIG11dHVvIHkgYXBlcnR1cmEuCiAgICAgICAgICAgIHAgRXN0byBpbXBsaWNhLCBwb3IgZWplbXBsbywgZXN0YWJsZWNlciBub3JtYXMgYsOhc2ljYXMgYWwgaW5pY2lvIGRlIGxhIHNlc2nDs24sIGNvbW8gZWwgY29tcHJvbWlzbyBkZSBlc2N1Y2hhciBzaW4gaW50ZXJydW1waXIsIG5vIGp1emdhciwgeSByZXNwZXRhciBsYSBjb25maWRlbmNpYWxpZGFkLiBBZGVtw6FzLCBlcyDDunRpbCBjb21lbnphciBjb24gYWN0aXZpZGFkZXMgcm9tcGVoaWVsb3MgcXVlIHJlbGFqZW4gYWwgZXF1aXBvIHkgcmVmdWVyY2VuIGxhIGVtcGF0w61hLgogICAgICAgICAgICBwICNbc3Ryb25nIEVqZW1wbG8uXSBVbiBlcXVpcG8gcXVlIGluaWNpYWxtZW50ZSBldml0YWJhIGRpc2N1dGlyIHByb2JsZW1hcyBncmF2ZXMgbG9ncsOzIGFicmlyc2UgY3VhbmRvIGVsIFNjcnVtIE1hc3RlciBwcm9wdXNvIGNvbWVuemFyIGNhZGEgcmV0cm9zcGVjdGl2YSBjb24gdW5hIHJvbmRhIGJyZXZlIHBhcmEgY29tcGFydGlyIGPDs21vIHNlIHNlbnTDrWFuIGVzZSBkw61hLCBnZW5lcmFuZG8gbWF5b3IgY29uZXhpw7NuIGVtb2Npb25hbC4KCiAgICAgICAgICAuZGl2KHRpdHVsbz0iUHJvbW92ZXIgbGEgcGFydGljaXBhY2nDs24gZXF1aXRhdGl2YSB5IGV2aXRhciBkb21pbmFuY2lhcyIpCiAgICAgICAgICAgIHAgVW4gcmllc2dvIGZyZWN1ZW50ZSBlbiByZXRyb3NwZWN0aXZhcyBlcyBxdWUgc29sbyB1bmFzIHBvY2FzIHBlcnNvbmFzIGhhYmxlbiwgbWllbnRyYXMgcXVlIG90cm9zIHBlcm1hbmVjZW4gY2FsbGFkb3MuIFBhcmEgZXZpdGFybG8sIGVsIGZhY2lsaXRhZG9yIGRlYmUgdXRpbGl6YXIgdMOpY25pY2FzIHF1ZSBmb21lbnRlbiBsYSBwYXJ0aWNpcGFjacOzbiBkZSB0b2RvcywgY29tbyByb25kYXMgZGUgcGFsYWJyYSwgdXNvIGRlIG5vdGFzIGFkaGVzaXZhcyBwYXJhIHF1ZSBjYWRhIHF1aWVuIGVzY3JpYmEgc3VzIGlkZWFzLCBvIGhlcnJhbWllbnRhcyBkaWdpdGFsZXMgY29uIGVuY3Vlc3RhcyBhbsOzbmltYXMuCiAgICAgICAgICAgIHAgI1tzdHJvbmcgRWplbXBsby5dIEVuIHVuIGVxdWlwbyByZW1vdG8sIGVsIGZhY2lsaXRhZG9yIHVzw7MgdW5hIGhlcnJhbWllbnRhIGVuIGzDrW5lYSBwYXJhIHF1ZSB0b2RvcyBlbnZpYXJhbiBzdXMgYXBvcnRlcyBzaW11bHTDoW5lYW1lbnRlLCBhc2VndXJhbmRvIHF1ZSBzZSBlc2N1Y2hhcmFuIHRvZGFzIGxhcyB2b2NlcywgaW5jbHVzbyBsYXMgbcOhcyB0w61taWRhcy4KICAgICAgLmNvbC1sZy00CiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8xNi5wbmciLCBhbHQ9IiIpLm1iLTQubWItbGctMAoKICAgIC8vIEJsb3F1ZTogaW1nLWFjb3JkZW9uCiAgICAucm93LmFsaWduLWl0ZW1zLXN0YXJ0Lm1iLTUKICAgICAgLmNvbC1sZy00CiAgICAgICAgZmlndXJlCiAgICAgICAgICBpbWcoc3JjPSJAL2Fzc2V0cy9jdXJzby90ZW1hMS8xNy5wbmciLCBhbHQ9IiIpLm1iLTQubWItbGctMAogICAgICAuY29sLWxnLTgKICAgICAgICBBY29yZGlvbkEodGlwbz0iYiIpCiAgICAgICAgICAuZGl2KHRpdHVsbz0iQ2VudHJhciBsYSBzZXNpw7NuIGVuIGFjY2lvbmVzIGNvbmNyZXRhcyB5IHJlYWxpc3RhcyIpCiAgICAgICAgICAgIHAgTm8gYmFzdGEgY29uIGlkZW50aWZpY2FyIHByb2JsZW1hcyBvIHNlbnRpbWllbnRvczsgbGEgcmV0cm9zcGVjdGl2YSBkZWJlIGNvbmNsdWlyIGNvbiBjb21wcm9taXNvcyBjbGFyb3MgeSBhbGNhbnphYmxlcy4gUG9yIGVsbG8sIGVsIGZhY2lsaXRhZG9yIGRlYmUgZ3VpYXIgYWwgZXF1aXBvIHBhcmEgcXVlIHRyYW5zZm9ybWUgbGFzIHJlZmxleGlvbmVzIGVuIGFjY2lvbmVzIGVzcGVjw61maWNhcyBjb24gcmVzcG9uc2FibGVzIHkgZmVjaGFzIGRlIHNlZ3VpbWllbnRvLgogICAgICAgICAgICBwICNbc3Ryb25nIEVqZW1wbG8uXSBVbiBlcXVpcG8gYWNvc3R1bWJyYWJhIGEgZmluYWxpemFyIGxhIHJldHJvc3BlY3RpdmEgc2luIGRlZmluaXIgcHLDs3hpbW9zIHBhc29zLiBDb24gbGEgbnVldmEgcHLDoWN0aWNhIGRlIGFzaWduYXIgdGFyZWFzIGNvbmNyZXRhcyBhIG1pZW1icm9zIGRlbCBlcXVpcG8sIG1lam9yw7Mgbm90YWJsZW1lbnRlIGxhIGltcGxlbWVudGFjacOzbiBkZSBtZWpvcmFzIHkgbGEgbW90aXZhY2nDs24uCgogICAgICAgICAgLmRpdih0aXR1bG89IkFkYXB0YXIgbGEgcmV0cm9zcGVjdGl2YSBhIGxhcyBuZWNlc2lkYWRlcyBkZWwgZXF1aXBvIikKICAgICAgICAgICAgcCBDYWRhIGVxdWlwbyBlcyDDum5pY28geSBldm9sdWNpb25hIGNvbiBlbCB0aWVtcG8uIFBvciBlc28sIGVsIGZhY2lsaXRhZG9yIGRlYmUgYWp1c3RhciBsYXMgdMOpY25pY2FzLCBkdXJhY2nDs24sIGRpbsOhbWljYXMgeSBmcmVjdWVuY2lhIGRlIGxhcyByZXRyb3NwZWN0aXZhcywgc2Vnw7puIGxhIG1hZHVyZXosIHRhbWHDsW8geSBjb250ZXh0byBkZWwgZ3J1cG8uCiAgICAgICAgICAgIHAgUG9yIGVqZW1wbG8sIGVxdWlwb3MgbnVldm9zIHB1ZWRlbiByZXF1ZXJpciBzZXNpb25lcyBtw6FzIGd1aWFkYXMgeSBjb3J0YXMsIG1pZW50cmFzIHF1ZSBlcXVpcG9zIG1hZHVyb3MsIHB1ZWRlbiBhcHJvdmVjaGFyIHTDqWNuaWNhcyBtw6FzIGNyZWF0aXZhcyB5IHNlc2lvbmVzIG3DoXMgcHJvZnVuZGFzLiBBZGVtw6FzLCBlcyByZWNvbWVuZGFibGUgdmFyaWFyIGxhcyBkaW7DoW1pY2FzIHBhcmEgbWFudGVuZXIgZWwgaW50ZXLDqXMgeSBldml0YXIgbGEgcnV0aW5hLgogICAgICAgICAgICBwICNbc3Ryb25nIEVqZW1wbG8uXSBVbiBlcXVpcG8gcXVlIHNlbnTDrWEgYWJ1cnJpbWllbnRvIHkgZmFsdGEgZGUgbW90aXZhY2nDs24gZW4gbGFzIHJldHJvc3BlY3RpdmFzIGNvbWVuesOzIGEgYWx0ZXJuYXIgdMOpY25pY2FzIChNYWQtU2FkLUdsYWQsIDRMcywgU3RhcnQtU3RvcC1Db250aW51ZSksIG1lam9yYW5kbyBsYSBwYXJ0aWNpcGFjacOzbiB5IGNhbGlkYWQgZGUgbG9zIHJlc3VsdGFkb3MuCgogICAgLy8gQmxvcXVlOiBiZy1mdWxsLWljb25vLXRleHRvCiAgICAuYmctZnVsbC13aWR0aC5iZy1jb2xvci0zLm1iLTUKICAgICAgLnB4LTQucHgtbWQtNS5weS00LnRleHQtd2hpdGUKICAgICAgICAucm93LmFsaWduLWl0ZW1zLWNlbnRlcgogICAgICAgICAgLmNvbC1sZy1hdXRvCiAgICAgICAgICAgIGltZyhzcmM9IkAvYXNzZXRzL2N1cnNvL3RlbWExLzE4LnN2ZyIsIHN0eWxlPSJtYXgtd2lkdGg6IDkwcHgiKS5teC1hdXRvCiAgICAgICAgICAuY29sLWxnCiAgICAgICAgICAgIHAubWItMCBGYWNpbGl0YXIgcmV0cm9zcGVjdGl2YXMgZWZpY2FjZXMgcmVxdWllcmUgdW5hIGNvbWJpbmFjacOzbiBkZSBwcmVwYXJhY2nDs24sIGhhYmlsaWRhZGVzIGludGVycGVyc29uYWxlcywgdMOpY25pY2FzIGFkZWN1YWRhcyB5IHVuIGVuZm9xdWUgY2xhcm8gZW4gbGEgbWVqb3JhIGNvbnRpbnVhLiBBbCBhcGxpY2FyIGVzdGFzIGJ1ZW5hcyBwcsOhY3RpY2FzLCBlbCBmYWNpbGl0YWRvciBjb250cmlidXllIGEgcXVlIGVsIGVxdWlwbyBubyBzb2xvIGlkZW50aWZpcXVlIMOhcmVhcyBkZSBtZWpvcmEsIHNpbm8gcXVlIHNlIGNvbXByb21ldGEgYWN0aXZhbWVudGUgYSBpbXBsZW1lbnRhciBjYW1iaW9zIHF1ZSBwb3RlbmNpZW4gc3UgZGVzZW1wZcOxbyB5IHJlc3VsdGFkb3MuCgogICAgLy8gQmxvcXVlOiBtYXRlcmlhbC1jb21wbGVtZW50YXJpbwogICAgLmJnLWZ1bGwtd2lkdGguYm9yZGVyLXRvcC5jb2xvci1wcmltYXJpbwogICAgICAucC00LnAtbWQtNQogICAgICAgIGgyKGRhdGEtYW9zPSJmYWRlLWxlZnQiKSBNQVRFUklBTCBDT01QTEVNRU5UQVJJTwogICAgICAgIC5yb3cubWF0ZXJpYWwtY29tcGxlbWVudGFyaW8KICAgICAgICAgIC5jb2wtMTIuY29sLW1kLTYuY29sLWxnLTcKICAgICAgICAgICAgcCBMb3MgaW52aXRhbW9zIGEgZXhwbG9yYXIgZWwgbWF0ZXJpYWwgY29tcGxlbWVudGFyaW8gcXVlIGFtcGxpYXLDoSBzdXMgY29ub2NpbWllbnRvcyBzb2JyZSB0w6ljbmljYXMgZGUgcmV0cm9zcGVjY2nDs24gZWZlY3RpdmEuCiAgICAgICAgICAgIHAuZC1mbGV4Lm15LTQKICAgICAgICAgICAgICBpbWcubWUtMyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL2xpbmsuc3ZnJyA6c3R5bGU9InsnbWF4LXdpZHRoJzonMTZweCd9IikKICAgICAgICAgICAgICBhKGhyZWY9Imh0dHBzOi8vZWxpYnJvLm5ldC9lcy9sYy90ZWNub2xvZ2ljYWRlbG9yaWVudGUvdGl0dWxvcy8yODk5MyIgdGFyZ2V0PSJfYmxhbmsiIHJlbD0ibm9vcGVuZXIgbm9yZWZlcnJlciIpIEVzY2Fsb25hLCBJLiAoMjAwOSkuIFBsYW5lYWNpw7NuIGludGVncmFsIGFncmVnYWRhIGUgaW50ZXJyZWxhY2nDs24gZGUgbG9zIHNpc3RlbWFzIGludGVybWl0ZW50ZXMgY29uIGVsIE1SUCB5IGZpbG9zb2bDrWEgSklULCBrYW5iYW4sIHJlaW5nZW5pZXLDrWEuIEVsIENpZCBFZGl0b3IgfCBhcHVudGVzLgogICAgICAgICAgICBwLmQtZmxleC5teS00CiAgICAgICAgICAgICAgaW1nLm1lLTMoc3JjPSdAL2Fzc2V0cy9jb21wb25lbnRlcy9saW5rLnN2ZycgOnN0eWxlPSJ7J21heC13aWR0aCc6JzE2cHgnfSIpCiAgICAgICAgICAgICAgYShocmVmPSJodHRwczovL3lvdXR1LmJlLzAtcnVSLWgyUjN3P3NpPTU3eHp1UHJ5dTBXOW1XTW8iIHRhcmdldD0iX2JsYW5rIiByZWw9Im5vb3BlbmVyIG5vcmVmZXJyZXIiKSBQcm95ZWN0byBLYW5iYW4uICgyMDIwKS4gTWVldHVwICJTQ1JVTSB5IFJldHJvc3BlY3RpdmFzIiBjb24gVmVyw7NuaWNhIE1pZXJzIFt2aWRlb10uIFlvdVR1YmUuCiAgICAgICAgICAuY29sLTEyLmNvbC1tZC02LmNvbC1sZy0zLm9mZnNldC1sZy0xCiAgICAgICAgICAgIGZpZ3VyZQogICAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2NvbXBvbmVudGVzL21hdGVyaWFsLWNvbXBsZW1lbnRhcmlvLnN2ZycsIGFsdD0nJykKCg=="},null]}